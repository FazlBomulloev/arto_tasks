import asyncio
import logging
import logging.config
from aiogram import Bot, Dispatcher
from pathlib import Path

from config import BOT_TOKEN, LOGGING_CONFIG, RUN_WORKER, RUN_BOT, VARS_DIR
from database import init_db_pool, create_tables, shutdown_db_pool
from handlers import get_all_routers
from worker import ShardedTaskWorker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)

def ensure_vars_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É vars/ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É vars –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    VARS_DIR.mkdir(exist_ok=True)
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    critical_files = {
        'followPeriod.txt': '10',      # –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—á–∞—Å—ã)
        'delay.txt': '5',              # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–º–∏–Ω—É—Ç—ã)  
        'lag.txt': '30',               # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∏–Ω—É—Ç—ã)
        'range.txt': '5',              # –†–∞–∑–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∏–Ω—É—Ç—ã)
        'accounts_delay.txt': '10',    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–º–∏–Ω—É—Ç—ã)
        'timeout_count.txt': '4',      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ —Ç–∞–π–º–∞—É—Ç–∞
        'timeout_duration.txt': '20',  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ (–º–∏–Ω—É—Ç—ã)
        'reset_delay.txt': '360',      # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–π (—Å–µ–∫—É–Ω–¥—ã)
        'reset_range.txt': '60',       # –í—Ç–æ—Ä–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–±—Ä–æ—Å–∞ (—Å–µ–∫—É–Ω–¥—ã)
        'whitelist.txt': '988710227,7059634482,817411344',  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        'password.txt': '5f03f8eeb9:fx'  # –ü–∞—Ä–æ–ª—å –ë–î (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!)
    }
    
    # –Ø–∑—ã–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    language_files = {
        'langsRu.txt': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π, –ò—Å–ø–∞–Ω—Å–∫–∏–π, –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –ö–∏—Ç–∞–π—Å–∫–∏–π, –Ø–ø–æ–Ω—Å–∫–∏–π, –ö–æ—Ä–µ–π—Å–∫–∏–π, –ê—Ä–∞–±—Å–∫–∏–π, –¢—É—Ä–µ—Ü–∫–∏–π, –ü–µ—Ä—Å–∏–¥—Å–∫–∏–π, –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π, –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π, –¢–∞–π—Å–∫–∏–π, –ú–∞–ª–∞–π—Å–∫–∏–π, –•–∏–Ω–¥–∏, –ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π, –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –ü–æ–ª—å—Å–∫–∏–π, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π, –®–≤–µ–¥—Å–∫–∏–π, –§–∏–Ω—Å–∫–∏–π, –î–∞—Ç—Å–∫–∏–π, –ù–æ—Ä–≤–µ–∂—Å–∫–∏–π, –†—É–º—ã–Ω—Å–∫–∏–π, –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π, –ß–µ—à—Å–∫–∏–π, –ì—Ä–µ—á–µ—Å–∫–∏–π, –ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π, –°–µ—Ä–±—Å–∫–∏–π, –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π, –•–æ—Ä–≤–∞—Ç—Å–∫–∏–π, –°–ª–æ–≤–µ–Ω—Å–∫–∏–π, –°–ª–æ–≤–∞—Ü–∫–∏–π, –≠—Å—Ç–æ–Ω—Å–∫–∏–π, –õ–∞—Ç—ã—à—Å–∫–∏–π, –õ–∏—Ç–æ–≤—Å–∫–∏–π, –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π, –ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π, –§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π, –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π, –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π, –£–∑–±–µ–∫—Å–∫–∏–π, –ö–∞–∑–∞—Ö—Å–∫–∏–π, –¢–∞—Ç–∞—Ä—Å–∫–∏–π',
        
        'langsEn.txt': 'English, Russian, Spanish, Portuguese, German, French, Italian, Chinese, Japanese, Korean, Arabic, Turkish, Persian, Indonesian, Vietnamese, Thai, Malay, Hindi, Bengali, Ukrainian, Polish, Dutch, Swedish, Finnish, Danish, Norwegian, Romanian, Hungarian, Czech, Greek, Catalan, Serbian, Bulgarian, Croatian, Slovenian, Slovak, Estonian, Latvian, Lithuanian, Macedonian, Afrikaans, Filipino, Georgian, Azerbaijani, Uzbek, Kazakh, Tatar',
        
        'langsCode.txt': 'en, ru, es, pt, de, fr, it, zh, ja, ko, ar, tr, fa, id, vi, th, ms, hi, bn, uk, pl, nl, sv, fi, da, no, ro, hu, cs, el, ca, sr, bg, hr, sl, sk, et, lv, lt, mk, af, ru, ka, az, uz, kk, ru'
    }
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_files = {**critical_files, **language_files}
    
    created_files = []
    
    for filename, content in all_files.items():
        file_path = VARS_DIR / filename
        
        if not file_path.exists():
            try:
                file_path.write_text(content, encoding='utf-8')
                created_files.append(filename)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {filename}: {e}")
    
    if created_files:
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(created_files)}")
        logger.info("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª vars/password.txt –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ!")
        logger.info("‚ö†Ô∏è  –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ vars/whitelist.txt")
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
    additional_dirs = ['accounts', 'downloads', 'logs']
    for dir_name in additional_dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}/")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏/–∏–ª–∏ –≤–æ—Ä–∫–µ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    ensure_vars_structure()
    
    if not RUN_BOT and not RUN_WORKER:
        logger.error("‚ùå –ò –±–æ—Ç, –∏ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    mode_description = []
    if RUN_BOT:
        mode_description.append("ü§ñ –ë–æ—Ç")
    if RUN_WORKER:
        mode_description.append("üîß –í–æ—Ä–∫–µ—Ä")
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫: {' + '.join(mode_description)}")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import uvloop
            uvloop.install()
            logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–∞ –≤—Å–µ–≥–¥–∞)
        await init_db_pool()
        await create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        tasks = []
        bot = None
        worker = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        if RUN_BOT:
            bot = Bot(token=BOT_TOKEN)
            dp = Dispatcher()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
            routers = get_all_routers()
            dp.include_routers(*routers)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
            
            async def run_bot():
                logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
                logger.info("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start")
                await dp.start_polling(
                    bot,
                    allowed_updates=['message', 'callback_query', 'channel_post']
                )
            
            tasks.append(run_bot())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞
        if RUN_WORKER:
            worker = ShardedTaskWorker()
            
            async def run_worker():
                logger.info("üîß –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–¥–∞—á...")
                await worker.start()
            
            tasks.append(run_worker())
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if RUN_BOT and not RUN_WORKER:
            logger.warning("‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        elif RUN_WORKER and not RUN_BOT:
            logger.info("‚ÑπÔ∏è –ó–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä - –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            logger.info("‚úÖ –ë–æ—Ç –∏ –≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if len(tasks) == 1:
            await tasks[0]
        else:
            await asyncio.gather(*tasks, return_exceptions=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            if worker:
                await worker.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            if bot:
                await bot.session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await shutdown_db_pool()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
