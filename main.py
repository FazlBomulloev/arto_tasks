import asyncio
import logging
import logging.config
from aiogram import Bot, Dispatcher
from pathlib import Path

from config import BOT_TOKEN, LOGGING_CONFIG, RUN_WORKER, RUN_BOT, VARS_DIR
from database import init_db_pool, create_tables, shutdown_db_pool
from handlers import get_all_routers
from worker import TaskWorker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)



async def main():
    if not RUN_BOT and not RUN_WORKER:
        logger.error("‚ùå –ò –±–æ—Ç, –∏ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    mode_description = []
    if RUN_BOT:
        mode_description.append("ü§ñ –ë–æ—Ç")
    if RUN_WORKER:
        mode_description.append("üîß –í–æ—Ä–∫–µ—Ä")
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫: {' + '.join(mode_description)}")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import uvloop
            uvloop.install()
            logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–∞ –≤—Å–µ–≥–¥–∞)
        await init_db_pool()
        await create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        tasks = []
        bot = None
        worker = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        if RUN_BOT:
            bot = Bot(token=BOT_TOKEN)
            dp = Dispatcher()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
            routers = get_all_routers()
            dp.include_routers(*routers)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
            
            async def run_bot():
                logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
                logger.info("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start")
                await dp.start_polling(
                    bot,
                    allowed_updates=['message', 'callback_query', 'channel_post']
                )
            
            tasks.append(run_bot())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞
        if RUN_WORKER:
            worker = TaskWorker()
            
            async def run_worker():
                logger.info("üîß –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–¥–∞—á...")
                await worker.start()
            
            tasks.append(run_worker())
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if RUN_BOT and not RUN_WORKER:
            logger.warning("‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        elif RUN_WORKER and not RUN_BOT:
            logger.info("‚ÑπÔ∏è –ó–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä - –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            logger.info("‚úÖ –ë–æ—Ç –∏ –≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if len(tasks) == 1:
            await tasks[0]
        else:
            await asyncio.gather(*tasks, return_exceptions=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            if worker:
                await worker.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            if bot:
                await bot.session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await shutdown_db_pool()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
