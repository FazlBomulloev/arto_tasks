import asyncio
import logging
import logging.config
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from pathlib import Path

from config import BOT_TOKEN, LOGGING_CONFIG, RUN_WORKER, RUN_BOT, VARS_DIR
from database import init_db_pool, create_tables, shutdown_db_pool
from handlers import get_all_routers
from worker import SimpleTaskWorker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.last_update_id = None
    
    async def get_last_update_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
            updates = await self.bot.get_updates(limit=1, timeout=1)
            if updates:
                self.last_update_id = updates[-1].update_id
                logger.info(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: {self.last_update_id}")
            else:
                logger.info("üìù –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def skip_pending_updates(self):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö
            skipped_count = 0
            while True:
                updates = await self.bot.get_updates(
                    offset=self.last_update_id + 1 if self.last_update_id else None,
                    limit=100,
                    timeout=2
                )
                
                if not updates:
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                self.last_update_id = updates[-1].update_id
                skipped_count += len(updates)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç
                if len(updates) < 100:
                    break
            
            if skipped_count > 0:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                await self.bot.get_updates(
                    offset=self.last_update_id + 1,
                    limit=1,
                    timeout=1
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML
                )
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.dp = Dispatcher()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
            routers = get_all_routers()
            self.dp.include_routers(*routers)
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {len(routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.full_name})")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            logger.info("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start")
            logger.info("üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self.skip_pending_updates()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await self.dp.start_polling(
                self.bot,
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                allowed_updates=[
                    'message',           # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ
                    'callback_query',    # –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
                    'channel_post'       # –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö
                ],
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
                offset=self.last_update_id + 1 if self.last_update_id else None,
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling
                timeout=10,
                drop_pending_updates=False  # –ú—ã —É–∂–µ —Å–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Å—Ç–∞—Ä—ã–µ
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            raise

async def main():
    if not RUN_BOT and not RUN_WORKER:
        logger.error("‚ùå –ò –±–æ—Ç, –∏ –≤–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    mode_description = []
    if RUN_BOT:
        mode_description.append("ü§ñ –ë–æ—Ç")
    if RUN_WORKER:
        mode_description.append("üîß –í–æ—Ä–∫–µ—Ä")
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫: {' + '.join(mode_description)} (–¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã)")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import uvloop
            uvloop.install()
            logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–∞ –≤—Å–µ–≥–¥–∞)
        await init_db_pool()
        await create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        tasks = []
        bot_manager = None
        worker = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        if RUN_BOT:
            bot_manager = BotManager()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
            setup_success = await bot_manager.setup_bot()
            if not setup_success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
                return
            
            async def run_bot():
                await bot_manager.start_polling()
            
            tasks.append(run_bot())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞
        if RUN_WORKER:
            worker = SimpleTaskWorker()
            
            async def run_worker():
                await worker.start()
            
            tasks.append(run_worker())
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if RUN_BOT and not RUN_WORKER:
            logger.warning("‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        elif RUN_WORKER and not RUN_BOT:
            logger.info("‚ÑπÔ∏è –ó–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä - –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            logger.info("‚úÖ –ë–æ—Ç –∏ –≤–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("üì∫ –ë–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if len(tasks) == 1:
            await tasks[0]
        else:
            await asyncio.gather(*tasks, return_exceptions=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            if worker:
                await worker.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            if bot_manager and bot_manager.bot:
                await bot_manager.bot.session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await shutdown_db_pool()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")