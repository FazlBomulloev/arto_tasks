import asyncio
import logging
import time
import json
import random
from typing import Dict, List, Optional
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError, RPCError, AuthKeyInvalidError
from telethon.tl.functions.messages import GetMessagesViewsRequest
from telethon.tl.functions.channels import JoinChannelRequest

from config import find_lang_code, API_ID, API_HASH, read_setting, REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
from database import (
    init_db_pool, shutdown_db_pool, update_account_status,
    increment_account_fails, reset_account_fails, 
    get_ban_accounts_for_retry, mark_account_retry_attempt
)
from exceptions import SessionError, RateLimitError
from redis import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [WORKER] - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/worker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('worker')

class SimpleTaskWorker:
    def __init__(self):
        self.redis_client = None
        self.running = False
        self.max_retries = 3
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        self.parallel_limits = {
            'view':100,       
            'subscribe': 10     
        }
        
        # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
        self.task_delays = {
            'view': (1, 5),      # 1-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
            'subscribe': (15, 45) # 15-45 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.processed_tasks = 0
        self.success_count = 0
        self.error_count = 0
        
        # –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.cached_settings = {}
        self.last_settings_update = 0
        
    async def start(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Task Worker...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await init_db_pool()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            self.redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._update_cached_settings()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.running = True
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
            raise
        finally:
            await self._shutdown()
    
    async def _update_cached_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.cached_settings = {
                'view_period': read_setting('followPeriod.txt', 3.0) * 3600,
                'view_delay': read_setting('delay.txt', 20.0) * 60,
                'sub_lag': read_setting('lag.txt', 14.0) * 60,
                'sub_range': read_setting('range.txt', 5.0) * 60,
                'timeout_count': int(read_setting('timeout_count.txt', 3.0)),
                'timeout_duration': read_setting('timeout_duration.txt', 13.0) * 60
            }
            self.last_settings_update = time.time()
            
            logger.info(f"""
‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–ö–ï–†–ê –û–ë–ù–û–í–õ–ï–ù–´:
   üëÄ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {self.cached_settings['view_period']/3600:.1f} —á–∞—Å–æ–≤
   üì∫ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {self.cached_settings['sub_lag']/60:.1f} –º–∏–Ω
   üé≤ –†–∞–∑–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫: {self.cached_settings['sub_range']/60:.1f} –º–∏–Ω
   üî¢ –ü–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã: {self.cached_settings['timeout_count']}
   ‚è∏Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {self.cached_settings['timeout_duration']/60:.1f} –º–∏–Ω
            """)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def _main_loop(self):
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á")
        
        last_stats_time = time.time()
        last_ban_check = time.time()
        cycle_count = 0
        
        while self.running:
            try:
                cycle_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞
                await self._process_worker_commands()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - self.last_settings_update > 300:
                    await self._update_cached_settings()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–∞–∑ –≤ —á–∞—Å)
                if time.time() - last_ban_check > 3600:
                    await self._check_banned_accounts_for_retry()
                    last_ban_check = time.time()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
                processed_in_cycle = await self._process_ready_tasks()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º retry –∑–∞–¥–∞—á–∏
                await self._process_retry_tasks()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - last_stats_time > 300:
                    await self._log_performance_stats()
                    self.processed_tasks = 0
                    self.success_count = 0
                    self.error_count = 0
                    last_stats_time = time.time()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞
                if processed_in_cycle > 0:
                    pause_time = random.uniform(10, 20)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞
                else:
                    pause_time = random.uniform(30, 60)  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
                    
                await asyncio.sleep(pause_time)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(10)
    
    async def _process_ready_tasks(self) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ —Ç–∏–ø–∞–º"""
        current_time = time.time()
        total_processed = 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º
            view_tasks = await self._get_ready_tasks_by_type('view', current_time)
            subscribe_tasks = await self._get_ready_tasks_by_type('subscribe', current_time)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–±–æ–ª—å—à–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏)
            if view_tasks:
                logger.info(f"üëÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(view_tasks)} –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                view_results = await self._execute_tasks_parallel(view_tasks, 'view')
                total_processed += len(view_results)
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á
                await asyncio.sleep(random.uniform(5, 10))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ (–º–µ–Ω—å—à–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏)
            if subscribe_tasks:
                logger.info(f"üì∫ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(subscribe_tasks)} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
                sub_results = await self._execute_tasks_parallel(subscribe_tasks, 'subscribe')
                total_processed += len(sub_results)
            
            return total_processed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
            return 0
    
    async def _get_ready_tasks_by_type(self, task_type: str, current_time: float) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑ Redis"""
        try:
            limit = self.parallel_limits[task_type]
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis
            ready_tasks_data = self.redis_client.zrangebyscore(
                "task_queue",
                min=0,
                max=current_time,
                withscores=True,
                start=0,
                num=limit * 2  # –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            )
            
            if not ready_tasks_data:
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á
            filtered_tasks = []
            for task_json, score in ready_tasks_data:
                try:
                    task_data = json.loads(task_json)
                    if task_data.get('task_type') == task_type:
                        task_data['redis_key'] = task_json  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        filtered_tasks.append(task_data)
                        
                        if len(filtered_tasks) >= limit:
                            break
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞—á–∏: {e}")
                    # –£–¥–∞–ª—è–µ–º –±–∏—Ç—É—é –∑–∞–¥–∞—á—É
                    self.redis_client.zrem("task_queue", task_json)
            
            # –£–¥–∞–ª—è–µ–º –≤–∑—è—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis
            for task in filtered_tasks:
                self.redis_client.zrem("task_queue", task['redis_key'])
                del task['redis_key']  # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π –∫–ª—é—á
            
            return filtered_tasks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ {task_type}: {e}")
            return []
    
    async def _execute_tasks_parallel(self, tasks: List[Dict], task_type: str) -> List[bool]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        if not tasks:
            return []
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
            parallel_tasks = []
            delay_range = self.task_delays[task_type]
            
            for i, task in enumerate(tasks):
                # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–±—Ä–æ—Å–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
                start_delay = random.uniform(*delay_range) * (i / len(tasks))
                
                parallel_task = asyncio.create_task(
                    self._execute_single_task_with_delay(task, start_delay)
                )
                parallel_tasks.append(parallel_task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*parallel_tasks, return_exceptions=True)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = 0
            error_count = 0
            
            for i, result in enumerate(results):
                task = tasks[i]
                phone = task.get('phone', 'unknown')
                channel = task.get('channel', 'unknown')
                
                if isinstance(result, Exception):
                    error_count += 1
                    logger.error(f"üí• {task_type} | {phone} | @{channel} | {result}")
                elif result:
                    success_count += 1
                    logger.debug(f"‚úÖ {task_type} | {phone} | @{channel}")
                else:
                    error_count += 1
                    logger.warning(f"‚ùå {task_type} | {phone} | @{channel}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            self.processed_tasks += len(results)
            self.success_count += success_count
            self.error_count += error_count
            
            success_rate = (success_count / len(results)) * 100 if results else 0
            logger.info(f"üìä {task_type.upper()}: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)")
            
            return [r for r in results if not isinstance(r, Exception)]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {task_type}: {e}")
            return []
    
    async def _execute_single_task_with_delay(self, task: Dict, delay: float) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–±—Ä–æ—Å–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            if delay > 0:
                await asyncio.sleep(delay)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            return await self._execute_task_simple(task)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: {e}")
            return False
    
    async def _execute_task_simple(self, task: Dict) -> bool:
        task_type = task.get('task_type', '')
        session_data = task.get('account_session', '')
        phone = task.get('phone', 'unknown')
        channel = task.get('channel', 'unknown')
        
        if not session_data:
            logger.warning(f"‚ùå {phone}: –Ω–µ—Ç session_data")
            return False
        
        client = None
        
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç "–Ω–∞ –ª–µ—Ç—É"
            client = TelegramClient(
                StringSession(session_data),
                API_ID, API_HASH,
                lang_code=find_lang_code(task.get('lang', 'English')),
                connection_retries=1,
                timeout=20
            )
            
            # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                logger.warning(f"‚ùå {phone}: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await self._handle_task_failure(phone, task_type)
                return False
            
            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if task_type == 'view':
                success = await self._execute_view_task(client, task)
            elif task_type == 'subscribe':
                success = await self._execute_subscribe_task(client, task)
            else:
                logger.warning(f"‚ùå {phone}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ {task_type}")
                return False
            
            # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                await self._handle_task_success(phone)
                return True
            else:
                await self._handle_task_failure(phone, task_type)
                return False
                
        except FloodWaitError as e:
            logger.warning(f"‚è≥ {phone}: FloodWait {e.seconds}s")
            await self._add_to_retry_queue(task, delay=e.seconds)
            return False
            
        except (RPCError, AuthKeyInvalidError) as e:
            logger.warning(f"‚ùå {phone}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            await self._handle_task_failure(phone, task_type)
            return False
            
        except Exception as e:
            logger.error(f"üí• {phone}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            await self._handle_task_failure(phone, task_type)
            return False
            
        finally:
            # 6. –í–°–ï–ì–î–ê –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
            if client:
                try:
                    await client.disconnect()
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {e}")
    
    async def _execute_view_task(self, client: TelegramClient, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        channel = task.get('channel', '')
        post_id = task.get('post_id', 0)
        phone = task.get('phone', 'unknown')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            channel_entity = await client.get_entity(channel)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            await client(GetMessagesViewsRequest(
                peer=channel_entity,
                id=[post_id],
                increment=True
            ))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
            reading_time = random.uniform(3, 7)
            await asyncio.sleep(reading_time)
            
            logger.debug(f"‚úÖ {phone}: –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ {post_id} –≤ @{channel}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ùå {phone}: –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ @{channel}:{post_id} - {e}")
            return False
    
    async def _execute_subscribe_task(self, client: TelegramClient, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        channel = task.get('channel', '')
        phone = task.get('phone', 'unknown')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            channel_entity = await client.get_entity(channel)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            created_at = task.get('created_at', 0)
            execute_at = task.get('execute_at', 0)
            current_time = time.time()
            
            if created_at and execute_at:
                planned_delay = (execute_at - created_at) / 60
                actual_delay = (current_time - created_at) / 60
                execution_drift = (current_time - execute_at) / 60
                
                if abs(execution_drift) <= 2.0:
                    timing_status = "‚è∞ –¢–û–ß–ù–û"
                elif execution_drift < 0:
                    timing_status = f"üöÄ –†–ê–ù–û ({abs(execution_drift):.1f}–º–∏–Ω)"
                else:
                    timing_status = f"‚è≥ –ü–û–ó–î–ù–û (+{execution_drift:.1f}–º–∏–Ω)"
                
                logger.info(f"üì∫ {phone} ‚Üí @{channel} | –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å: {planned_delay:.1f}–º–∏–Ω | –§–∞–∫—Ç: {actual_delay:.1f}–º–∏–Ω | {timing_status}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await client(JoinChannelRequest(channel_entity))
            
            logger.info(f"‚úÖ {phone}: –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{channel}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ùå {phone}: –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{channel} - {e}")
            return False
    
    async def _handle_task_success(self, phone: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            await reset_account_fails(phone)
            logger.debug(f"üîì {phone}: —Å–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è {phone}: {e}")
    
    async def _handle_task_failure(self, phone: str, task_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            fail_count = await increment_account_fails(phone)
            
            if fail_count >= 3:
                await update_account_status(phone, 'ban')
                logger.warning(f"üö´ {phone}: –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ BAN (–Ω–µ—É–¥–∞—á: {fail_count})")
            else:
                logger.debug(f"‚ö†Ô∏è {phone}: –Ω–µ—É–¥–∞—á–∞ {fail_count}/3 ({task_type})")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è {phone}: {e}")
    
    async def _add_to_retry_queue(self, task: Dict, delay: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            task['retry_count'] = task.get('retry_count', 0) + 1
            task['retry_after'] = time.time() + delay + random.uniform(60, 300)
            
            if task['retry_count'] <= self.max_retries:
                self.redis_client.lpush('retry_tasks', json.dumps(task))
                logger.debug(f"üîÑ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ retry (–ø–æ–ø—ã—Ç–∫–∞ {task['retry_count']}/{self.max_retries})")
            else:
                logger.warning(f"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ retry: {e}")
    
    async def _process_retry_tasks(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            current_time = time.time()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 10 retry –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
            for _ in range(10):
                task_data = self.redis_client.rpop('retry_tasks')
                if not task_data:
                    break
                
                try:
                    task = json.loads(task_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∞
                    if task.get('retry_after', 0) <= current_time:
                        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –≤—ã–ø–æ–ª–Ω—è–µ–º
                        success = await self._execute_task_simple(task)
                        if success:
                            logger.debug(f"‚úÖ Retry –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        # –í—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        self.redis_client.lpush('retry_tasks', task_data)
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def _process_worker_commands(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞"""
        try:
            command_data = self.redis_client.rpop('worker_commands')
            if not command_data:
                return
                
            command = json.loads(command_data)
            
            if command['command'] == 'reload_settings':
                logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                await self._update_cached_settings()
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def _check_banned_accounts_for_retry(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ä–∞–∑ –≤ 120 —á–∞—Å–æ–≤"""
        try:
            ban_accounts = await get_ban_accounts_for_retry()
            
            if not ban_accounts:
                return
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(ban_accounts)} –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            for account in ban_accounts[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±–æ–ª–µ–µ 5 –∑–∞ —Ä–∞–∑
                phone = account['phone_number']
                
                try:
                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await mark_account_retry_attempt(phone)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–¥–ø–∏—Å–∫–∏
                    test_task = {
                        'account_session': account['session_data'],
                        'phone': phone,
                        'channel': 'telegram',  # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                        'lang': account['lang'],
                        'task_type': 'subscribe'
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
                    success = await self._execute_task_simple(test_task)
                    
                    if success:
                        logger.info(f"üîì {phone}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±–∞–Ω–∞!")
                    else:
                        logger.info(f"üö´ {phone}: –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–Ω–µ")
                        
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(random.uniform(30, 60))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    async def _log_performance_stats(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –æ—á–µ—Ä–µ–¥–∏
            total_in_redis = self.redis_client.zcard("task_queue") or 0
            retry_count = self.redis_client.llen("retry_tasks") or 0
            current_time = time.time()
            ready_in_redis = self.redis_client.zcount("task_queue", 0, current_time) or 0
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            total_processed = self.processed_tasks
            tasks_per_min = total_processed / 5 if total_processed > 0 else 0
            success_rate = (self.success_count / total_processed * 100) if total_processed > 0 else 0
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if tasks_per_min > 15 and success_rate > 80:
                performance_status = "üöÄ –û–¢–õ–ò–ß–ù–û"
            elif tasks_per_min > 8 and success_rate > 70:
                performance_status = "‚úÖ –•–û–†–û–®–û"
            elif tasks_per_min > 3 and success_rate > 50:
                performance_status = "‚ö†Ô∏è –°–†–ï–î–ù–ï"
            else:
                performance_status = "‚ùå –ù–ò–ó–ö–û"
            
            logger.info(f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (5 –º–∏–Ω):
   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_processed} ({tasks_per_min:.1f}/–º–∏–Ω)
   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% ({self.success_count}/{total_processed})
   ‚ùå –û—à–∏–±–æ–∫: {self.error_count}
   üì¶ –í Redis: {total_in_redis} (–≥–æ—Ç–æ–≤—ã—Ö: {ready_in_redis})
   üîÑ Retry: {retry_count}
   üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_status}""")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def get_task_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            current_time = time.time()
            
            total_tasks = self.redis_client.zcard("task_queue") or 0
            ready_tasks = self.redis_client.zcount("task_queue", 0, current_time) or 0
            retry_tasks = self.redis_client.llen("retry_tasks") or 0
            
            return {
                'total_tasks': total_tasks,
                'ready_tasks': ready_tasks,
                'future_tasks': total_tasks - ready_tasks,
                'retry_tasks': retry_tasks,
                'processed_last_period': self.processed_tasks,
                'success_rate': (self.success_count / max(self.processed_tasks, 1)) * 100
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
            return {}
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞...")
        self.running = False
    
    async def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            if self.redis_client:
                self.redis_client.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await shutdown_db_pool()
            
            logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    worker = SimpleTaskWorker()
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await worker.stop()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        import uvloop
        uvloop.install()
        logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π event loop")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    asyncio.run(main())