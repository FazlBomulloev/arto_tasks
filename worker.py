import asyncio
import logging
import time
import json
import random
from typing import Dict, List, Optional
from collections import deque
from telethon import TelegramClient
from telethon.errors import FloodWaitError, RPCError, AuthKeyInvalidError
from telethon.tl.functions.messages import GetMessagesViewsRequest
from telethon.tl.functions.channels import JoinChannelRequest

from config import find_lang_code, API_ID, API_HASH, read_setting, REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
from database import (
    init_db_pool, shutdown_db_pool, update_account_status,
    increment_account_fails, reset_account_fails, 
    get_ban_accounts_for_retry, mark_account_retry_attempt
)
from session_manager import global_session_manager
from exceptions import SessionError, RateLimitError
from redis import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [WORKER] - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/worker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('worker')

class TaskWorker:
    def __init__(self):
        self.redis_client = None
        self.running = False
        self.max_retries = 3
        self.sessions_loaded = False
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        self.task_buffer = deque()  # –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏
        self.max_buffer_size = 1500  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –≤ –±—É—Ñ–µ—Ä–µ
        self.min_buffer_size = 1400  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏
        
        # üÜï –ù–û–í–û–ï: –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.buffer_updating = False  # –§–ª–∞–≥ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–∞
        self.buffer_lock = asyncio.Lock()  # –õ–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.processed_tasks = 0
        self.last_buffer_load = 0
        
        # üÜï –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
        self.cached_settings = {}
        self.last_settings_update = 0
        
    async def start(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Task Worker —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await init_db_pool()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            self.redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._update_cached_settings()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
            logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...")
            await self._try_preload_sessions()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.running = True
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
            raise
        finally:
            await self._shutdown()
    
    async def _update_cached_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.cached_settings = {
                'view_period': read_setting('followPeriod.txt', 3.0) * 3600,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'view_delay': read_setting('delay.txt', 20.0) * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'sub_lag': read_setting('lag.txt', 14.0) * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö 
                'sub_range': read_setting('range.txt', 5.0) * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'accounts_delay': read_setting('accounts_delay.txt', 2.0) * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'timeout_count': int(read_setting('timeout_count.txt', 3.0)),
                'timeout_duration': read_setting('timeout_duration.txt', 13.0) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            }
            self.last_settings_update = time.time()
            
            logger.info(f"""
‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–ö–ï–†–ê –û–ë–ù–û–í–õ–ï–ù–´:
   üëÄ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {self.cached_settings['view_period']/3600:.1f} —á–∞—Å–æ–≤
   ‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {self.cached_settings['view_delay']/60:.1f} –º–∏–Ω
   üì∫ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {self.cached_settings['sub_lag']/60:.1f} –º–∏–Ω
   üé≤ –†–∞–∑–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫: {self.cached_settings['sub_range']/60:.1f} –º–∏–Ω
   ‚è≥ –ú–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {self.cached_settings['accounts_delay']/60:.1f} –º–∏–Ω
   üî¢ –ü–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã: {self.cached_settings['timeout_count']}
   ‚è∏Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {self.cached_settings['timeout_duration']/60:.1f} –º–∏–Ω
            """)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def _try_preload_sessions(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏"""
        try:
            results = await global_session_manager.preload_all_sessions()
            
            if results['loaded'] == 0:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                self.sessions_loaded = False
            else:
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {results['loaded']} —Å–µ—Å—Å–∏–π")
                self.sessions_loaded = True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            self.sessions_loaded = False
    
    async def _main_loop(self):
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π")
        
        last_stats_time = time.time()
        last_session_check = time.time()
        last_ban_check = time.time()
        last_buffer_info = time.time()
        buffer_check_counter = 0
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞
                await self._process_worker_commands()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - self.last_settings_update > 300:
                    await self._update_cached_settings()
                
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
                if not self.sessions_loaded and time.time() - last_session_check > 300:
                    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                    await self._try_preload_sessions()
                    last_session_check = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–∞–∑ –≤ —á–∞—Å)
                if time.time() - last_ban_check > 3600:
                    await self._check_banned_accounts_for_retry()
                    last_ban_check = time.time()
                
                if self.sessions_loaded:
                    # üÜï –ù–û–í–û–ï: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    buffer_check_counter += 1
                    if buffer_check_counter >= 30:  # 30 * 2 —Å–µ–∫ = 1 –º–∏–Ω—É—Ç–∞
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        if not self.buffer_updating:
                            asyncio.create_task(self._async_smart_buffer_management())
                        buffer_check_counter = 0
                    
                    await self._fill_task_buffer()
                    
                    # üÜï –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                    processed = await self._process_buffer_tasks_with_session_check()
                    self.processed_tasks += processed
                    
                    await self._process_retry_tasks()
                
                    if random.random() < 0.002:  # ~0.2% —à–∞–Ω—Å
                        health_stats = await global_session_manager.health_check()
                        if health_stats.get('removed_dead', 0) > 0:
                            logger.info(f"üîß –û—á–∏—â–µ–Ω–æ {health_stats['removed_dead']} –º–µ—Ä—Ç–≤—ã—Ö —Å–µ—Å—Å–∏–π")
                            # –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π, –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ—Ç –∑–∞–¥–∞—á –º–µ—Ä—Ç–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                            asyncio.create_task(self._cleanup_buffer_dead_sessions())
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Ñ–µ—Ä–µ –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥
                if time.time() - last_buffer_info > 90:
                    await self._log_buffer_info()
                    last_buffer_info = time.time()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - last_stats_time > 300:
                    await self._log_performance_stats()
                    self.processed_tasks = 0
                    last_stats_time = time.time()
                
                # –ü–∞—É–∑–∞
                sleep_time = 2 if self.sessions_loaded else 10
                await asyncio.sleep(sleep_time)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
    
    async def _async_smart_buffer_management(self):
        """üÜï –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if self.buffer_updating:
            return
        
        self.buffer_updating = True
        try:
            async with self.buffer_lock:
                current_time = time.time()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
                buffer_analysis = self._analyze_buffer_tasks()
                
                # –ï—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –º–Ω–æ–≥–æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á, –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–µ –¥–µ–ª–∞–µ–º
                if buffer_analysis['ready_now'] > 200:
                    logger.debug(f"üîí –ú–Ω–æ–≥–æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á ({buffer_analysis['ready_now']}), –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                redis_priority_tasks = self.redis_client.zrangebyscore(
                    "task_queue",
                    min=0,
                    max='+inf',
                    withscores=True,
                    start=0,
                    num=2000
                )
                
                if not redis_priority_tasks:
                    logger.debug("üìã –ù–µ—Ç –∑–∞–¥–∞—á –≤ Redis –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—É—é –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é
                logger.debug(f"""
üß† –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –ë–£–§–ï–†–ê:
   üìã –í –±—É—Ñ–µ—Ä–µ: {buffer_analysis['total']} –∑–∞–¥–∞—á
   ‚è∞ –ì–æ—Ç–æ–≤—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ: {buffer_analysis['ready_now']}
   üïê –ì–æ—Ç–æ–≤—ã—Ö –≤ 5 –º–∏–Ω: {buffer_analysis['ready_5min']}
   üì¶ –ó–∞–¥–∞—á –≤ Redis: {len(redis_priority_tasks)}
                """)
                
                await self._reorder_buffer_tasks_safe(redis_priority_tasks, current_time)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–∞: {e}")
        finally:
            self.buffer_updating = False
    
    async def _reorder_buffer_tasks_safe(self, redis_priority_tasks: List, current_time: float):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É–º–Ω–∞—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # 1. –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±—É—Ñ–µ—Ä–µ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –∏ –±—É–¥—É—â–∏–µ
            ready_tasks = []  # –ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º
            future_tasks = []  # –ë—É–¥—É—â–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ Redis –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –±—É—Ñ–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            buffer_copy = list(self.task_buffer)
            
            for task in buffer_copy:
                execute_at = task.get('execute_at', current_time)
                if execute_at <= current_time + 30:  # –ì–æ—Ç–æ–≤—ã–µ —Å–µ–π—á–∞—Å + 30 —Å–µ–∫ –∑–∞–ø–∞—Å
                    ready_tasks.append(task)
                else:
                    future_tasks.append(task)
            
            # 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ Redis
            returned_count = 0
            if future_tasks:
                redis_return_data = {}
                for task in future_tasks:
                    task_json = json.dumps(task)
                    execute_at = task.get('execute_at', current_time)
                    redis_return_data[task_json] = execute_at
                
                if redis_return_data:
                    self.redis_client.zadd("task_queue", redis_return_data)
                    returned_count = len(future_tasks)
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            spots_available = self.max_buffer_size - len(ready_tasks)
            
            if spots_available <= 200:  # –ï—Å–ª–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                self.task_buffer = deque(ready_tasks)
                logger.debug(f"üîí –ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω –≥–æ—Ç–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞")
                return
            
            # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis
            fresh_tasks = self.redis_client.zrangebyscore(
                "task_queue",
                min=0,
                max='+inf',
                withscores=True,
                start=0,
                num=spots_available
            )
            
            loaded_count = 0
            new_tasks = []
            
            for task_json, score in fresh_tasks:
                try:
                    task_data = json.loads(task_json)
                    task_data['score'] = score
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                    session_data = task_data.get('account_session')
                    if session_data and global_session_manager.get_client(session_data):
                        new_tasks.append(task_data)
                        loaded_count += 1
                        # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
                        self.redis_client.zrem("task_queue", task_json)
                    else:
                        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
                        self.redis_client.zrem("task_queue", task_json)
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π: {task_data.get('phone', 'unknown')}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
                    # –£–¥–∞–ª—è–µ–º –±–∏—Ç—É—é –∑–∞–¥–∞—á—É
                    self.redis_client.zrem("task_queue", task_json)
            
            # 5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
            all_tasks = ready_tasks + new_tasks
            if all_tasks:
                sorted_tasks = sorted(all_tasks, key=lambda x: x.get('execute_at', current_time))
                self.task_buffer = deque(sorted_tasks)
            else:
                self.task_buffer = deque()
            
            # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–º–Ω–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
            ready_now = sum(1 for t in self.task_buffer if t.get('execute_at', 0) <= current_time)
            ready_5min = sum(1 for t in self.task_buffer 
                            if current_time < t.get('execute_at', 0) <= current_time + 300)
            
            logger.info(f"""
‚úÖ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:
   üîí –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö: {len(ready_tasks)} –∑–∞–¥–∞—á
   üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ Redis: {returned_count} –∑–∞–¥–∞—á
   üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ–∂–∏—Ö: {loaded_count} –∑–∞–¥–∞—á  
   üìã –ò—Ç–æ–≥–æ –≤ –±—É—Ñ–µ—Ä–µ: {len(self.task_buffer)}/1500
   ‚è∞ –ì–æ—Ç–æ–≤—ã—Ö —Å–µ–π—á–∞—Å: {ready_now}
   üïê –ì–æ—Ç–æ–≤—ã—Ö –≤ 5 –º–∏–Ω: {ready_5min}
            """)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–∞: {e}")
    
    async def _cleanup_buffer_dead_sessions(self):
        """üÜï –û—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä –æ—Ç –∑–∞–¥–∞—á —Å –º–µ—Ä—Ç–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
        try:
            async with self.buffer_lock:
                alive_tasks = []
                removed_count = 0
                
                for task in self.task_buffer:
                    session_data = task.get('account_session')
                    if session_data and global_session_manager.get_client(session_data):
                        alive_tasks.append(task)
                    else:
                        removed_count += 1
                
                if removed_count > 0:
                    self.task_buffer = deque(alive_tasks)
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {removed_count} –∑–∞–¥–∞—á —Å –º–µ—Ä—Ç–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞: {e}")
    
    def _analyze_buffer_tasks(self) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –≤ –±—É—Ñ–µ—Ä–µ"""
        current_time = time.time()
        
        analysis = {
            'total': len(self.task_buffer),
            'ready_now': 0,
            'ready_5min': 0,
            'future': 0
        }
        
        for task in self.task_buffer:
            execute_at = task.get('execute_at', current_time)
            
            if execute_at <= current_time:
                analysis['ready_now'] += 1
            elif execute_at <= current_time + 300:  # 5 –º–∏–Ω—É—Ç
                analysis['ready_5min'] += 1
            else:
                analysis['future'] += 1
        
        return analysis
    
    async def _fill_task_buffer(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å
            if len(self.task_buffer) >= self.min_buffer_size or self.buffer_updating:
                return
            
            current_time = time.time()
            
            # –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            needed = self.max_buffer_size - len(self.task_buffer)
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis
            ready_tasks_data = self.redis_client.zrangebyscore(
                "task_queue",
                min=0,
                max=current_time,
                withscores=True,
                start=0,
                num=needed
            )
            
            if not ready_tasks_data:
                return
            
            loaded_count = 0
            
            async with self.buffer_lock:
                for task_json, score in ready_tasks_data:
                    try:
                        task_data = json.loads(task_json)
                        task_data['score'] = score
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                        session_data = task_data.get('account_session')
                        if session_data and global_session_manager.get_client(session_data):
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                            self.task_buffer.append(task_data)
                            loaded_count += 1
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ Redis –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                        self.redis_client.zrem("task_queue", task_json)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏ –≤ –±—É—Ñ–µ—Ä: {e}")
                        # –£–¥–∞–ª—è–µ–º –±–∏—Ç—É—é –∑–∞–¥–∞—á—É
                        self.redis_client.zrem("task_queue", task_json)
            
            if loaded_count > 0:
                self.last_buffer_load = time.time()
                logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–¥–∞—á –≤ –±—É—Ñ–µ—Ä (–≤—Å–µ–≥–æ –≤ –±—É—Ñ–µ—Ä–µ: {len(self.task_buffer)})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –≤ –±—É—Ñ–µ—Ä: {e}")
    
    async def _process_buffer_tasks_with_session_check(self) -> int:
        """üÜï –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–π"""
        if not self.task_buffer:
            return 0
        
        current_time = time.time()
        processed_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 50 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
        max_process = min(50, len(self.task_buffer))
        
        for _ in range(max_process):
            if not self.task_buffer:
                break
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±—É—Ñ–µ—Ä–∞
            try:
                async with self.buffer_lock:
                    if not self.task_buffer:
                        break
                    task = self.task_buffer.popleft()
            except Exception:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
            execute_at = task.get('execute_at', 0)
            task_type = task.get('task_type', '')
            
            # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
            if task_type == 'subscribe':
                # –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å lag.txt (14 –º–∏–Ω—É—Ç)
                min_delay = self.cached_settings['sub_lag']
                if execute_at > current_time:
                    async with self.buffer_lock:
                        self.task_buffer.appendleft(task)
                    break
            else:
                # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                if execute_at > current_time:
                    async with self.buffer_lock:
                        self.task_buffer.appendleft(task)
                    break
            
            # üÜï –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            session_data = task.get('account_session')
            if not session_data or not global_session_manager.get_client(session_data):
                logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π: {task.get('phone', 'unknown')}")
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            try:
                success = await self._execute_task(task)
                if success:
                    processed_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
                if task_type == 'subscribe':
                    delay = random.uniform(2.0, 5.0)  # –ë–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
                else:
                    delay = random.uniform(0.1, 0.5)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                
                await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        
        return processed_count
    
    async def _execute_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É)"""
        task_type = task.get('task_type', '')
        
        if task_type == 'view':
            return await self._execute_view_task(task)
        elif task_type == 'subscribe':
            return await self._execute_subscription_task(task)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
            return False
    
    async def _execute_view_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        session_data = task['account_session']
        phone = task['phone']
        channel = task['channel']
        post_id = task.get('post_id', 0)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            client = global_session_manager.get_client(session_data)
            
            if not client:
                logger.warning(f"‚ùå {phone}: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await self._handle_task_failure(phone, 'view')
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                channel_entity = await client.get_entity(channel)
            except Exception as e:
                logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel}: {e}")
                await self._handle_task_failure(phone, 'view')
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            await client(GetMessagesViewsRequest(
                peer=channel_entity,
                id=[post_id],
                increment=True
            ))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
            reading_time = random.uniform(3, 7)
            await asyncio.sleep(reading_time)
            
            # –£—Å–ø–µ—Ö
            await self._handle_task_success(phone)
            logger.debug(f"‚úÖ {phone}: –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ {post_id} –≤ @{channel}")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ {phone}: FloodWait {e.seconds}s")
            await self._add_to_retry_queue(task, 'view', delay=e.seconds)
            return False
            
        except (RPCError, AuthKeyInvalidError) as e:
            logger.warning(f"‚ùå {phone}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            await self._handle_task_failure(phone, 'view')
            return False
            
        except Exception as e:
            pass
    async def _execute_subscription_task(self, task: Dict) -> bool:
        session_data = task['account_session']
        phone = task['phone']
        channel = task['channel']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            client = global_session_manager.get_client(session_data)
            
            if not client:
                logger.warning(f"‚ùå {phone}: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
                await self._handle_task_failure(phone, 'subscription')
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                channel_entity = await client.get_entity(channel)
            except Exception as e:
                logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel}: {e}")
                await self._handle_task_failure(phone, 'subscription')
                return False
            
            # üÜï –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            created_at = task.get('created_at', 0)
            execute_at = task.get('execute_at', 0)
            current_time = time.time()
            
            actual_delay = (current_time - created_at) / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            planned_delay = (execute_at - created_at) / 60   # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            logger.info(f"""
üì∫ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò:
   üì± –ê–∫–∫–∞—É–Ω—Ç: {phone}
   üì∫ –ö–∞–Ω–∞–ª: @{channel}
   ‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {planned_delay:.1f} –º–∏–Ω
   üïê –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {actual_delay:.1f} –º–∏–Ω
   ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: lag={self.cached_settings['sub_lag']/60:.1f}–º–∏–Ω, range={self.cached_settings['sub_range']/60:.1f}–º–∏–Ω
            """)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await client(JoinChannelRequest(channel_entity))
            
            # –£—Å–ø–µ—Ö
            await self._handle_task_success(phone)
            logger.info(f"‚úÖ {phone}: –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{channel} (–∑–∞–¥–µ—Ä–∂–∫–∞: {actual_delay:.1f} –º–∏–Ω)")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ {phone}: FloodWait {e.seconds}s –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")
            await self._add_to_retry_queue(task, 'subscription', delay=e.seconds)
            return False
            
        except (RPCError, AuthKeyInvalidError) as e:
            logger.warning(f"‚ùå {phone}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - {e}")
            await self._handle_task_failure(phone, 'subscription')
            return False
            
        except Exception as e:
            logger.error(f"üí• {phone}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - {e}")
            await self._handle_task_failure(phone, 'subscription')
            return False
    
    async def _handle_task_success(self, phone: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            success = await reset_account_fails(phone)
            if success:
                logger.debug(f"üîì {phone}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ active")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è {phone}: {e}")

    async def _handle_task_failure(self, phone: str, task_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            fail_count = await increment_account_fails(phone)
            
            if fail_count >= 3:
                await update_account_status(phone, 'ban')
                logger.warning(f"üö´ {phone}: –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ BAN (–Ω–µ—É–¥–∞—á: {fail_count})")
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø—É–ª–∞
                await global_session_manager.remove_session_by_phone(phone)
                
                # üÜï –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                asyncio.create_task(self._remove_tasks_for_banned_account_async(phone))
            else:
                logger.debug(f"‚ö†Ô∏è {phone}: –Ω–µ—É–¥–∞—á–∞ {fail_count}/3 ({task_type})")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è {phone}: {e}")
    
    async def _remove_tasks_for_banned_account_async(self, phone: str):
        """üÜï –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            removed_from_redis = 0
            removed_from_buffer = 0
            
            # 1. –£–¥–∞–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –ø–∞–º—è—Ç–∏ (–±—ã—Å—Ç—Ä–æ)
            async with self.buffer_lock:
                buffer_tasks_to_keep = []
                for task in self.task_buffer:
                    if task.get('phone') != phone:
                        buffer_tasks_to_keep.append(task)
                    else:
                        removed_from_buffer += 1
                
                self.task_buffer = deque(buffer_tasks_to_keep)
            
            # 2. –£–¥–∞–ª—è–µ–º –∏–∑ Redis –æ—á–µ—Ä–µ–¥–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ, –¥–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Redis
            cursor = 0
            while True:
                cursor, keys = self.redis_client.zscan("task_queue", cursor, count=100)
                
                for task_json, score in keys.items():
                    try:
                        task_data = json.loads(task_json)
                        if task_data.get('phone') == phone:
                            self.redis_client.zrem("task_queue", task_json)
                            removed_from_redis += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ Redis: {e}")
                
                if cursor == 0:
                    break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Redis
                await asyncio.sleep(0.01)
            
            # 3. –£–¥–∞–ª—è–µ–º –∏–∑ retry –æ—á–µ—Ä–µ–¥–∏
            retry_tasks = []
            removed_from_retry = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ retry –∑–∞–¥–∞—á–∏
            all_retry_tasks = self.redis_client.lrange('retry_tasks', 0, -1)
            
            for retry_task_json in all_retry_tasks:
                try:
                    retry_task = json.loads(retry_task_json)
                    if retry_task.get('phone') != phone:
                        retry_tasks.append(retry_task_json)
                    else:
                        removed_from_retry += 1
                except:
                    retry_tasks.append(retry_task_json)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏—Ç—ã–µ –∑–∞–¥–∞—á–∏
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å—é retry –æ—á–µ—Ä–µ–¥—å
            if all_retry_tasks:
                self.redis_client.delete('retry_tasks')
                if retry_tasks:
                    self.redis_client.lpush('retry_tasks', *retry_tasks)
            
            total_removed = removed_from_redis + removed_from_buffer + removed_from_retry
            
            if total_removed > 0:
                logger.info(f"""
üóëÔ∏è –ê–°–ò–ù–•–†–û–ù–ù–û –æ—á–∏—â–µ–Ω—ã –∑–∞–¥–∞—á–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}:
   üì¶ –ò–∑ Redis: {removed_from_redis}
   üíæ –ò–∑ –±—É—Ñ–µ—Ä–∞: {removed_from_buffer}  
   üîÑ –ò–∑ retry: {removed_from_retry}
   üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_removed}
                """)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á –¥–ª—è {phone}: {e}")
    
    async def _add_to_retry_queue(self, task: Dict, task_type: str, delay: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            task['retry_count'] = task.get('retry_count', 0) + 1
            task['task_type'] = task_type
            task['retry_after'] = time.time() + delay + random.uniform(60, 300)
            
            if task['retry_count'] <= self.max_retries:
                self.redis_client.lpush('retry_tasks', json.dumps(task))
                logger.debug(f"üîÑ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ retry (–ø–æ–ø—ã—Ç–∫–∞ {task['retry_count']}/{self.max_retries})")
            else:
                logger.warning(f"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ retry: {e}")
    
    async def _process_retry_tasks(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            current_time = time.time()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 20 retry –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
            for _ in range(20):
                task_data = self.redis_client.rpop('retry_tasks')
                if not task_data:
                    break
                
                try:
                    task = json.loads(task_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∞
                    if task.get('retry_after', 0) <= current_time:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                        session_data = task.get('account_session')
                        if session_data and global_session_manager.get_client(session_data):
                            # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ –∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º
                            success = await self._execute_task(task)
                            if success:
                                logger.debug(f"‚úÖ Retry –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.debug(f"üóëÔ∏è Retry –∑–∞–¥–∞—á–∞ –æ—Ç–±—Ä–æ—à–µ–Ω–∞ - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è")
                    else:
                        # –í—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        self.redis_client.lpush('retry_tasks', task_data)
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def _process_worker_commands(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞"""
        try:
            command_data = self.redis_client.rpop('worker_commands')
            if not command_data:
                return
                
            command = json.loads(command_data)
            
            if command['command'] == 'reload_settings':
                logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                await self._update_cached_settings()
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def _check_banned_accounts_for_retry(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ä–∞–∑ –≤ 120 —á–∞—Å–æ–≤"""
        try:
            ban_accounts = await get_ban_accounts_for_retry()
            
            if not ban_accounts:
                return
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(ban_accounts)} –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            for account in ban_accounts:
                phone = account['phone_number']
                
                try:
                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await mark_account_retry_attempt(phone)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
                    test_task = {
                        'account_session': account['session_data'],
                        'phone': phone,
                        'channel': 'telegram',
                        'lang': account['lang'],
                        'task_type': 'subscribe'
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    success = await self._execute_task(test_task)
                    
                    if success:
                        logger.info(f"üîì {phone}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±–∞–Ω–∞!")
                    else:
                        logger.info(f"üö´ {phone}: –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–Ω–µ")
                        
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(random.uniform(30, 60))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    async def _log_buffer_info(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–µ –∑–∞–¥–∞—á"""
        try:
            buffer_size = len(self.task_buffer)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á –≤ –±—É—Ñ–µ—Ä–µ
            view_count = sum(1 for task in self.task_buffer if task.get('task_type') == 'view')
            sub_count = sum(1 for task in self.task_buffer if task.get('task_type') == 'subscribe')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            if self.task_buffer:
                current_time = time.time()
                ready_count = sum(1 for task in self.task_buffer if task.get('execute_at', 0) <= current_time)
                future_count = buffer_size - ready_count
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
                subscription_delays = []
                for task in self.task_buffer:
                    if task.get('task_type') == 'subscribe':
                        created_at = task.get('created_at', current_time)
                        execute_at = task.get('execute_at', current_time)
                        delay_minutes = (execute_at - created_at) / 60
                        subscription_delays.append(delay_minutes)
                
                avg_sub_delay = sum(subscription_delays) / len(subscription_delays) if subscription_delays else 0
                
                logger.info(f"""
üìã –ë–£–§–ï–† –ó–ê–î–ê–ß (1500):
   üìä –í—Å–µ–≥–æ –≤ –±—É—Ñ–µ—Ä–µ: {buffer_size}/{self.max_buffer_size}
   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {view_count}
   üì∫ –ü–æ–¥–ø–∏—Å–æ–∫: {sub_count}
   ‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {ready_count}
   ‚è≥ –ë—É–¥—É—â–∏—Ö: {future_count}
   üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è: {'–í –ø—Ä–æ—Ü–µ—Å—Å–µ' if self.buffer_updating else '–ì–æ—Ç–æ–≤'}
   ‚è∞ –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {avg_sub_delay:.1f} –º–∏–Ω
                """)
            else:
                logger.info("üìã –ë–£–§–ï–† –ó–ê–î–ê–ß: –ø—É—Å—Ç–æ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±—É—Ñ–µ—Ä–∞: {e}")
    
    async def _log_performance_stats(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if self.sessions_loaded:
                session_stats = await global_session_manager.get_stats()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –æ—á–µ—Ä–µ–¥–∏
                total_in_redis = self.redis_client.zcard("task_queue") or 0
                retry_count = self.redis_client.llen("retry_tasks") or 0
                
                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                tasks_per_min = self.processed_tasks / 5 if self.processed_tasks > 0 else 0
                
                # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if tasks_per_min > 20:
                    performance_status = "üöÄ –û–¢–õ–ò–ß–ù–û"
                elif tasks_per_min > 10:
                    performance_status = "‚úÖ –•–û–†–û–®–û"
                elif tasks_per_min > 5:
                    performance_status = "‚ö†Ô∏è –°–†–ï–î–ù–ï"
                else:
                    performance_status = "‚ùå –ù–ò–ó–ö–û"
                
                logger.info(f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (5 –º–∏–Ω):
   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {self.processed_tasks} ({tasks_per_min:.1f}/–º–∏–Ω)
   üìã –í –±—É—Ñ–µ—Ä–µ: {len(self.task_buffer)}/{self.max_buffer_size}
   üì¶ –í Redis: {total_in_redis}
   üîÑ Retry: {retry_count}
   üß† –°–µ—Å—Å–∏–π: {session_stats['connected']}/{session_stats['total_loaded']}
   üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_status}
   ‚öôÔ∏è –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.buffer_updating else '–ì–æ—Ç–æ–≤–∞'}
                """)
            else:
                logger.info("‚è≥ –í–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def get_buffer_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É—Ñ–µ—Ä–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            buffer_size = len(self.task_buffer)
            current_time = time.time()
            
            view_count = sum(1 for task in self.task_buffer if task.get('task_type') == 'view')
            sub_count = sum(1 for task in self.task_buffer if task.get('task_type') == 'subscribe')
            ready_count = sum(1 for task in self.task_buffer if task.get('execute_at', 0) <= current_time)
            
            return {
                'buffer_size': buffer_size,
                'max_buffer_size': self.max_buffer_size,
                'view_tasks': view_count,
                'subscription_tasks': sub_count,
                'ready_tasks': ready_count,
                'future_tasks': buffer_size - ready_count,
                'last_buffer_load': self.last_buffer_load,
                'buffer_updating': self.buffer_updating
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É—Ñ–µ—Ä–∞: {e}")
            return {}
    
    async def reload_sessions(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π"""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...")
        try:
            await global_session_manager.shutdown()
            await self._try_preload_sessions()
            
            if self.sessions_loaded:
                logger.info("‚úÖ –°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ—Ç –∑–∞–¥–∞—á —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
                asyncio.create_task(self._cleanup_buffer_dead_sessions())
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return False
    
    async def clear_task_buffer(self):
        """–û—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä –∑–∞–¥–∞—á (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –∑–∞–¥–∞—á...")
        async with self.buffer_lock:
            cleared_count = len(self.task_buffer)
            self.task_buffer.clear()
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–¥–∞—á –∏–∑ –±—É—Ñ–µ—Ä–∞")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞...")
        self.running = False
    
    async def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–∞
            while self.buffer_updating:
                await asyncio.sleep(0.1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ Redis –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            if self.task_buffer:
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(self.task_buffer)} –∑–∞–¥–∞—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ Redis...")
                
                tasks_data = {}
                for task in self.task_buffer:
                    try:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                        clean_task = {k: v for k, v in task.items() if k != 'score'}
                        task_json = json.dumps(clean_task)
                        execute_at = task.get('execute_at', time.time())
                        tasks_data[task_json] = execute_at
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
                
                if tasks_data:
                    self.redis_client.zadd("task_queue", tasks_data)
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks_data)} –∑–∞–¥–∞—á –≤ Redis")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            await global_session_manager.shutdown()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            if self.redis_client:
                self.redis_client.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            await shutdown_db_pool()
            
            logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    worker = TaskWorker()
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await worker.stop()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        import uvloop
        uvloop.install()
        logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π event loop")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    asyncio.run(main())