import asyncio
import logging
import time
import json
import random
from typing import Dict, List, Optional
from telethon import TelegramClient
from telethon.errors import FloodWaitError, RPCError, AuthKeyInvalidError
from telethon.tl.functions.messages import GetMessagesViewsRequest
from telethon.tl.functions.channels import JoinChannelRequest

from config import find_lang_code, API_ID, API_HASH, read_setting
from database import (
    init_db_pool, shutdown_db_pool, update_account_status,
    increment_account_fails, reset_account_fails, 
    get_ban_accounts_for_retry, mark_account_retry_attempt
)
from session_manager import global_session_manager
from exceptions import SessionError, RateLimitError
from redis import Redis
from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [WORKER] - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/worker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('worker')

class ShardedTaskWorker:
    def __init__(self):
        self.redis_client = None
        self.running = False
        self.max_retries = 3
        self.sessions_loaded = False
        self.ban_retry_hours = 120  # 120 —á–∞—Å–æ–≤ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
        
        # ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ò –®–ê–†–î–ò–ù–ì–ê
        self.max_shards_per_cycle = 10  # –ú–∞–∫—Å–∏–º—É–º —à–∞—Ä–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ —Ä–∞–∑
        self.max_tasks_per_shard = 50   # –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á —Å –æ–¥–Ω–æ–≥–æ —à–∞—Ä–¥–∞
        self.performance_mode = 'adaptive' 
        
    async def start(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Task Worker...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await init_db_pool()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            self.redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä—É–∑–∫–∏
            await self._detect_performance_mode()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏
            logger.info("üß† –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π...")
            await self._try_preload_sessions()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.running = True
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
            raise
        finally:
            await self._shutdown()
    
    async def _detect_performance_mode(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤
            view_shards = self.redis_client.zcard("active_view_shards") or 0
            sub_shards = self.redis_client.zcard("active_subscription_shards") or 0
            total_shards = view_shards + sub_shards
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞
            if total_shards <= 5:
                self.performance_mode = 'conservative'
                self.max_shards_per_cycle = 5
                self.max_tasks_per_shard = 30
                mode_desc = "–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô (–º–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
            elif total_shards <= 20:
                self.performance_mode = 'adaptive'  
                self.max_shards_per_cycle = 10
                self.max_tasks_per_shard = 50
                mode_desc = "–ê–î–ê–ü–¢–ò–í–ù–´–ô (—Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
            else:
                self.performance_mode = 'aggressive'
                self.max_shards_per_cycle = 15
                self.max_tasks_per_shard = 70
                mode_desc = "–ê–ì–†–ï–°–°–ò–í–ù–´–ô (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
            
            logger.info(f"""
üéØ –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {mode_desc}
   üóÇÔ∏è –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤: {total_shards}
   üìä –®–∞—Ä–¥–æ–≤ –∑–∞ —Ü–∏–∫–ª: {self.max_shards_per_cycle}
   üìã –ó–∞–¥–∞—á —Å —à–∞—Ä–¥–∞: {self.max_tasks_per_shard}
            """)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            # Fallback –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            self.performance_mode = 'conservative'
    
    async def _try_preload_sessions(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏"""
        try:
            results = await global_session_manager.preload_all_sessions()
            
            if results['loaded'] == 0:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                logger.info("üí° –í–æ—Ä–∫–µ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                self.sessions_loaded = False
            else:
                logger.info(f"‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['loaded']} —Å–µ—Å—Å–∏–π –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
                self.sessions_loaded = True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π: {e}")
            logger.info("üí° –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            self.sessions_loaded = False
    
    async def _main_loop(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å –®–ê–†–î–ò–ù–ì–û–ú"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        processed_views = 0
        processed_subs = 0
        processed_shards = 0
        last_stats_time = time.time()
        last_session_check = time.time()
        last_ban_check = time.time()
        last_cleanup = time.time()
        last_performance_check = time.time()
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞
                await self._process_worker_commands()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                if time.time() - last_performance_check > 900:
                    await self._detect_performance_mode()
                    last_performance_check = time.time()
                
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if not self.sessions_loaded and time.time() - last_session_check > 300:
                    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                    await self._try_preload_sessions()
                    last_session_check = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–∞–∑ –≤ —á–∞—Å)
                if time.time() - last_ban_check > 3600:
                    await self._check_banned_accounts_for_retry()
                    last_ban_check = time.time()
                
                # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —à–∞—Ä–¥–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
                if time.time() - last_cleanup > 1800:
                    await self._cleanup_expired_shards()
                    last_cleanup = time.time()
                
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                if self.sessions_loaded:
                    
                    # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ì–û–¢–û–í–´–ï –ó–ê–î–ê–ß–ò 
                    ready_tasks = await self._get_ready_tasks_from_shards()
                    view_tasks = ready_tasks['view_tasks']
                    sub_tasks = ready_tasks['subscription_tasks']
                    processed_shards += ready_tasks['shards_processed']
                    
                    # ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
                    processing_tasks = []
                    
                    if view_tasks:
                        processing_tasks.append(
                            asyncio.create_task(
                                self._process_view_batch_optimized(view_tasks),
                                name="process_views"
                            )
                        )
                    
                    if sub_tasks:
                        processing_tasks.append(
                            asyncio.create_task(
                                self._process_subscription_batch_sequential(sub_tasks),
                                name="process_subscriptions"
                            )
                        )
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º retry –∑–∞–¥–∞—á–∏
                    processing_tasks.append(
                        asyncio.create_task(
                            self._process_retry_tasks(),
                            name="process_retry"
                        )
                    )
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    if processing_tasks:
                        results = await asyncio.gather(*processing_tasks, return_exceptions=True)
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        for i, result in enumerate(results):
                            if isinstance(result, int):
                                if processing_tasks[i].get_name() == "process_views":
                                    processed_views += result
                                elif processing_tasks[i].get_name() == "process_subscriptions":
                                    processed_subs += result
                            elif isinstance(result, Exception):
                                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {processing_tasks[i].get_name()}: {result}")
                    
                    # Health check —Å–µ—Å—Å–∏–π
                    if random.random() < 0.005:  # ~0.5% —à–∞–Ω—Å
                        health_stats = await global_session_manager.health_check()
                        if health_stats.get('removed_dead', 0) > 0:
                            logger.info(f"üîß –û—á–∏—â–µ–Ω–æ {health_stats['removed_dead']} –º–µ—Ä—Ç–≤—ã—Ö —Å–µ—Å—Å–∏–π")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - last_stats_time > 300:
                    await self._log_performance_stats(processed_views, processed_subs, processed_shards)
                    processed_views = processed_subs = processed_shards = 0
                    last_stats_time = time.time()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                sleep_time = {
                    'conservative': 3,
                    'adaptive': 2, 
                    'aggressive': 1
                }.get(self.performance_mode, 2)
                
                if not self.sessions_loaded:
                    sleep_time *= 10  # –ë–æ–ª—å—à–µ –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π
                
                await asyncio.sleep(sleep_time)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
    
    async def _get_ready_tasks_from_shards(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ê–ö–¢–ò–í–ù–´–• —à–∞—Ä–¥–æ–≤"""
        if not self.sessions_loaded:
            return {'view_tasks': [], 'subscription_tasks': [], 'shards_processed': 0}
            
        try:
            current_time = time.time()
            view_tasks = []
            subscription_tasks = []
            shards_processed = 0
            
            # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–ò–í–ù–´–ï –®–ê–†–î–´ –ü–†–û–°–ú–û–¢–†–û–í
            view_shards_processed = await self._process_view_shards(current_time)
            view_tasks.extend(view_shards_processed['tasks'])
            shards_processed += view_shards_processed['shards_count']
            
            # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–ò–í–ù–´–ï –®–ê–†–î–´ –ü–û–î–ü–ò–°–û–ö
            sub_shards_processed = await self._process_subscription_shards(current_time)
            subscription_tasks.extend(sub_shards_processed['tasks'])
            shards_processed += sub_shards_processed['shards_count']
            
            if view_tasks or subscription_tasks:
                logger.info(f"""
‚úÖ –ò–∑ {shards_processed} —à–∞—Ä–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:
   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {len(view_tasks)}
   üì∫ –ü–æ–¥–ø–∏—Å–æ–∫: {len(subscription_tasks)}
                """)
            
            return {
                'view_tasks': view_tasks,
                'subscription_tasks': subscription_tasks,
                'shards_processed': shards_processed
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ —à–∞—Ä–¥–æ–≤: {e}")
            return {'view_tasks': [], 'subscription_tasks': [], 'shards_processed': 0}
    
    async def _process_view_shards(self, current_time: float) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞—Ä–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            ready_view_shards = self.redis_client.zrangebyscore(
                "active_view_shards",
                min=0,
                max=current_time + 1800,  # +30 –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥
                withscores=False,
                start=0,
                num=self.max_shards_per_cycle
            )
            
            view_tasks = []
            processed_shards = 0
            
            for shard_meta_json in ready_view_shards:
                try:
                    shard_meta = json.loads(shard_meta_json)
                    shard_key = shard_meta['shard_key']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–≥–æ —à–∞—Ä–¥–∞
                    ready_task_data = self.redis_client.zrangebyscore(
                        shard_key,
                        min=0,
                        max=current_time,
                        withscores=True,
                        start=0,
                        num=self.max_tasks_per_shard
                    )
                    
                    if not ready_task_data:
                        continue
                    
                    processed_tasks = []
                    
                    for task_json, score in ready_task_data:
                        try:
                            task_data = json.loads(task_json)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            view_tasks.extend(task_data.get('tasks', []))
                            processed_tasks.append(task_json)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —à–∞—Ä–¥–µ {shard_key}: {e}")
                            processed_tasks.append(task_json)
                    
                    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞—Ä–¥–∞
                    if processed_tasks:
                        self.redis_client.zrem(shard_key, *processed_tasks)
                        processed_shards += 1
                    
                    # –ï—Å–ª–∏ —à–∞—Ä–¥ –ø—É—Å—Ç–æ–π - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    remaining = self.redis_client.zcard(shard_key)
                    if remaining == 0:
                        self.redis_client.zrem("active_view_shards", shard_meta_json)
                        self.redis_client.delete(shard_key)
                        logger.debug(f"üóëÔ∏è –ü—É—Å—Ç–æ–π —à–∞—Ä–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É–¥–∞–ª–µ–Ω: {shard_key}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞—Ä–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            
            return {
                'tasks': view_tasks,
                'shards_count': processed_shards
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞—Ä–¥–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            return {'tasks': [], 'shards_count': 0}
    
    async def _process_subscription_shards(self, current_time: float) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–¥—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞—Ä–¥—ã –ø–æ–¥–ø–∏—Å–æ–∫
            ready_sub_shards = self.redis_client.zrangebyscore(
                "active_subscription_shards",
                min=0,
                max=current_time + 3600,  # +1 —á–∞—Å –≤–ø–µ—Ä–µ–¥
                withscores=False,
                start=0,
                num=self.max_shards_per_cycle
            )
            
            subscription_tasks = []
            processed_shards = 0
            
            for shard_meta_json in ready_sub_shards:
                try:
                    shard_meta = json.loads(shard_meta_json)
                    shard_key = shard_meta['shard_key']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–≥–æ —à–∞—Ä–¥–∞
                    ready_task_data = self.redis_client.zrangebyscore(
                        shard_key,
                        min=0,
                        max=current_time,
                        withscores=True,
                        start=0,
                        num=self.max_tasks_per_shard // 2  # –ü–æ–¥–ø–∏—Å–∫–∏ –±–µ—Ä–µ–º –º–µ–Ω—å—à–µ
                    )
                    
                    if not ready_task_data:
                        continue
                    
                    processed_tasks = []
                    
                    for task_json, score in ready_task_data:
                        try:
                            task_data = json.loads(task_json)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                            subscription_tasks.append(task_data)
                            processed_tasks.append(task_json)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —à–∞—Ä–¥–µ {shard_key}: {e}")
                            processed_tasks.append(task_json)
                    
                    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞—Ä–¥–∞
                    if processed_tasks:
                        self.redis_client.zrem(shard_key, *processed_tasks)
                        processed_shards += 1
                    
                    # –ï—Å–ª–∏ —à–∞—Ä–¥ –ø—É—Å—Ç–æ–π - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    remaining = self.redis_client.zcard(shard_key)
                    if remaining == 0:
                        self.redis_client.zrem("active_subscription_shards", shard_meta_json)
                        self.redis_client.delete(shard_key)
                        logger.debug(f"üóëÔ∏è –ü—É—Å—Ç–æ–π —à–∞—Ä–¥ –ø–æ–¥–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω: {shard_key}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞—Ä–¥–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            
            return {
                'tasks': subscription_tasks,
                'shards_count': processed_shards
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞—Ä–¥–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {'tasks': [], 'shards_count': 0}
    
    async def _process_view_batch_optimized(self, tasks: List[Dict]) -> int:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if not tasks:
            return 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ—Å—Ç–∞–º –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        posts_tasks = {}
        for task in tasks:
            post_id = task.get('post_id', 'unknown')
            if post_id not in posts_tasks:
                posts_tasks[post_id] = []
            posts_tasks[post_id].append(task)
        
        logger.info(f"üëÄ –®–ê–†–î–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(tasks)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å {len(posts_tasks)} –ø–æ—Å—Ç–æ–≤")
        
        total_success = 0
        
        # ‚úÖ –°–ï–ú–ê–§–û–† –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        max_concurrent = {
            'conservative': 5,
            'adaptive': 10,
            'aggressive': 15
        }.get(self.performance_mode, 10)
        
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def process_post_limited(post_id, post_tasks_list):
            async with semaphore:
                return await self._process_post_views_batched(post_id, post_tasks_list)
        
        # –°–æ–∑–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        post_tasks = []
        for post_id, post_tasks_list in posts_tasks.items():
            task = asyncio.create_task(
                process_post_limited(post_id, post_tasks_list),
                name=f"post_{post_id}_sharded"
            )
            post_tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏
        results = await asyncio.gather(*post_tasks, return_exceptions=True)
        
        for result in results:
            if isinstance(result, int):
                total_success += result
            elif isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {result}")
        
        logger.info(f"‚úÖ –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_success}/{len(tasks)} —É—Å–ø–µ—à–Ω–æ")
        return total_success
    
    async def _process_post_views_batched(self, post_id: int, tasks: List[Dict]) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞ –ë–ê–¢–ß–ê–ú–ò –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤"""
        
        # ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–´–ô —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        batch_size = {
            'conservative': 15,
            'adaptive': 25,
            'aggressive': 35
        }.get(self.performance_mode, 25)
        
        success_count = 0
        
        for i in range(0, len(tasks), batch_size):
            batch = tasks[i:i + batch_size]
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
            view_tasks = []
            for task in batch:
                delay = random.uniform(0.1, 2.0)
                view_task = asyncio.create_task(
                    self._execute_view_task_with_delay(task, delay),
                    name=f"view_{task.get('phone', 'unknown')}"
                )
                view_tasks.append(view_task)
            
            # –ñ–¥–µ–º –±–∞—Ç—á
            results = await asyncio.gather(*view_tasks, return_exceptions=True)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤ –±–∞—Ç—á–µ
            batch_success = sum(1 for r in results if isinstance(r, bool) and r)
            success_count += batch_success
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if i + batch_size < len(tasks):
                batch_delay = {
                    'conservative': random.uniform(2, 4),
                    'adaptive': random.uniform(1, 3),
                    'aggressive': random.uniform(0.5, 2)
                }.get(self.performance_mode, random.uniform(1, 3))
                
                await asyncio.sleep(batch_delay)
        
        logger.info(f"üìä –ü–æ—Å—Ç {post_id}: {success_count}/{len(tasks)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–±–∞—Ç—á–∞–º–∏)")
        return success_count
    
    async def _process_subscription_batch_sequential(self, tasks: List[Dict]) -> int:
        """–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ø–∞—É–∑–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        if not tasks:
            return 0
        
        logger.info(f"üì∫ –®–ê–†–î–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(tasks)} –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø–∞—É–∑–∞–º–∏")
        
        # ‚úÖ –ß–ò–¢–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –§–ê–ô–õ–û–í
        accounts_delay_minutes = read_setting('accounts_delay.txt', 6.0)
        timeout_count = int(read_setting('timeout_count.txt', 4.0))
        timeout_duration_minutes = read_setting('timeout_duration.txt', 7.0)
        
        logger.info(f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ vars/:
   üë• –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {accounts_delay_minutes} –º–∏–Ω
   üî¢ –ü–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã: {timeout_count}
   ‚è∏Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {timeout_duration_minutes} –º–∏–Ω
        """)
        
        success_count = 0
        
        for idx, task in enumerate(tasks):
            try:
                success = await self._execute_subscription_task(task)
                if success:
                    success_count += 1
                
                # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–∞—É–∑
                if idx < len(tasks) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    
                    # –û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    delay_seconds = accounts_delay_minutes * 60
                    
                    # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ù–£–ñ–ù–ê –õ–ò –î–õ–ò–ù–ù–ê–Ø –ü–ê–£–ó–ê
                    subscriptions_done = idx + 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                    if subscriptions_done % timeout_count == 0:
                        # –ö–∞–∂–¥—ã–µ timeout_count –ø–æ–¥–ø–∏—Å–æ–∫ - –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
                        delay_seconds = timeout_duration_minutes * 60
                        logger.info(f"‚è∏Ô∏è –î–õ–ò–ù–ù–ê–Ø –ü–ê–£–ó–ê –ø–æ—Å–ª–µ {subscriptions_done} –ø–æ–¥–ø–∏—Å–æ–∫: {timeout_duration_minutes} –º–∏–Ω")
                    else:
                        logger.info(f"‚è≥ –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞: {accounts_delay_minutes} –º–∏–Ω")
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    delay_multiplier = {
                        'conservative': 1.2,
                        'adaptive': 1.0,
                        'aggressive': 0.8
                    }.get(self.performance_mode, 1.0)
                    
                    final_delay = delay_seconds * delay_multiplier * random.uniform(0.9, 1.1)
                    
                    logger.info(f"‚è∞ –ò—Ç–æ–≥–æ–≤–∞—è –ø–∞—É–∑–∞: {final_delay/60:.1f} –º–∏–Ω (—Ä–µ–∂–∏–º: {self.performance_mode})")
                    await asyncio.sleep(final_delay)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        
        logger.info(f"‚úÖ –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {success_count}/{len(tasks)} —É—Å–ø–µ—à–Ω–æ")
        return success_count
    
    async def _cleanup_expired_shards(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —à–∞—Ä–¥—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º cleanup –∏–∑ task_service
            from task_service import task_service
            cleanup_stats = await task_service.cleanup_expired_shards()
            
            if cleanup_stats['expired_view_shards'] > 0 or cleanup_stats['expired_subscription_shards'] > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —à–∞—Ä–¥–æ–≤: {cleanup_stats['expired_view_shards']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, {cleanup_stats['expired_subscription_shards']} –ø–æ–¥–ø–∏—Å–æ–∫")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —à–∞—Ä–¥–æ–≤: {e}")
    
    async def _log_performance_stats(self, processed_views: int, processed_subs: int, processed_shards: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if self.sessions_loaded:
                session_stats = await global_session_manager.get_stats()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞—Ä–¥–æ–≤
                view_shards = self.redis_client.zcard("active_view_shards") or 0
                sub_shards = self.redis_client.zcard("active_subscription_shards") or 0
                
                # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                views_per_min = processed_views / 5 if processed_views > 0 else 0
                subs_per_min = processed_subs / 5 if processed_subs > 0 else 0
                shards_per_min = processed_shards / 5 if processed_shards > 0 else 0
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if views_per_min > 10:
                    performance_status = "üöÄ –û–¢–õ–ò–ß–ù–û"
                elif views_per_min > 5:
                    performance_status = "‚úÖ –•–û–†–û–®–û"
                elif views_per_min > 1:
                    performance_status = "‚ö†Ô∏è –°–†–ï–î–ù–ï"
                else:
                    performance_status = "‚ùå –ù–ò–ó–ö–û"
                
                logger.info(f"""
üìä –®–ê–†–î–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (5 –º–∏–Ω, —Ä–µ–∂–∏–º: {self.performance_mode.upper()}):
   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {processed_views} ({views_per_min:.1f}/–º–∏–Ω)
   üì∫ –ü–æ–¥–ø–∏—Å–æ–∫: {processed_subs} ({subs_per_min:.1f}/–º–∏–Ω)
   üóÇÔ∏è –®–∞—Ä–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_shards} ({shards_per_min:.1f}/–º–∏–Ω)
   üß† –°–µ—Å—Å–∏–π: {session_stats['connected']}/{session_stats['total_loaded']}
   üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤: {view_shards} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, {sub_shards} –ø–æ–¥–ø–∏—Å–æ–∫
   üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_status}
                """)
            else:
                logger.info("‚è≥ –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _process_worker_commands(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞"""
        try:
            command_data = self.redis_client.rpop('worker_commands')
            if not command_data:
                return
                
            command = json.loads(command_data)
            
            if command['command'] == 'reload_settings':
                logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await self._detect_performance_mode()
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def _check_banned_accounts_for_retry(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ä–∞–∑ –≤ 120 —á–∞—Å–æ–≤"""
        try:
            ban_accounts = await get_ban_accounts_for_retry()
            
            if not ban_accounts:
                return
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(ban_accounts)} –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            for account in ban_accounts:
                phone = account['phone_number']
                
                try:
                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await mark_account_retry_attempt(phone)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
                    test_task = {
                        'account_session': account['session_data'],
                        'phone': phone,
                        'channel': 'telegram',
                        'lang': account['lang']
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    success = await self._execute_subscription_task(test_task)
                    
                    if success:
                        logger.info(f"üîì {phone}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±–∞–Ω–∞!")
                    else:
                        logger.info(f"üö´ {phone}: –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–Ω–µ")
                        
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(random.uniform(30, 60))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    async def _execute_view_task_with_delay(self, task: Dict, delay: float = 0) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if delay > 0:
            await asyncio.sleep(delay)
        
        return await self._execute_view_task(task)
    
    async def _execute_view_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞–Ω–æ–≤"""
        session_data = task['account_session']
        phone = task['phone']
        channel = task['channel']
        post_id = task['post_id']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞
            client = global_session_manager.get_client(session_data)
            
            if not client:
                logger.warning(f"‚ùå {phone}: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await self._handle_task_failure(phone, 'view')
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            await asyncio.sleep(random.uniform(0.1, 2.0))
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                channel_entity = await client.get_entity(channel)
            except Exception as e:
                logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel}: {e}")
                await self._handle_task_failure(phone, 'view')
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
            await client(GetMessagesViewsRequest(
                peer=channel_entity,
                id=[post_id],
                increment=True
            ))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
            await asyncio.sleep(random.uniform(1, 3))
            
            # –£–°–ü–ï–• - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            await self._handle_task_success(phone)
            logger.debug(f"‚úÖ {phone}: –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ {post_id} –≤ @{channel}")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ {phone}: FloodWait {e.seconds}s")
            await self._add_to_retry_queue(task, 'view', delay=e.seconds)
            return False
            
        except (RPCError, AuthKeyInvalidError) as e:
            logger.warning(f"‚ùå {phone}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            await self._handle_task_failure(phone, 'view')
            return False
            
        except Exception as e:
            logger.error(f"üí• {phone}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            await self._handle_task_failure(phone, 'view')
            return False
    
    async def _execute_subscription_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞–Ω–æ–≤"""
        session_data = task['account_session']
        phone = task['phone']
        channel = task['channel']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞
            client = global_session_manager.get_client(session_data)
            
            if not client:
                logger.warning(f"‚ùå {phone}: –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
                await self._handle_task_failure(phone, 'subscription')
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                channel_entity = await client.get_entity(channel)
            except Exception as e:
                logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel}: {e}")
                await self._handle_task_failure(phone, 'subscription')
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await client(JoinChannelRequest(channel_entity))
            
            # –£–°–ü–ï–• - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            await self._handle_task_success(phone)
            logger.info(f"‚úÖ {phone}: –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{channel}")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ {phone}: FloodWait {e.seconds}s –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")
            await self._add_to_retry_queue(task, 'subscription', delay=e.seconds)
            return False
            
        except (RPCError, AuthKeyInvalidError) as e:
            logger.warning(f"‚ùå {phone}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - {e}")
            await self._handle_task_failure(phone, 'subscription')
            return False
            
        except Exception as e:
            logger.error(f"üí• {phone}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - {e}")
            await self._handle_task_failure(phone, 'subscription')
            return False
    
    async def _handle_task_success(self, phone: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            success = await reset_account_fails(phone)
            if success:
                logger.debug(f"üîì {phone}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ active")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è {phone}: {e}")

    async def _handle_task_failure(self, phone: str, task_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            fail_count = await increment_account_fails(phone)
            
            if fail_count >= 3:
                await update_account_status(phone, 'ban')
                logger.warning(f"üö´ {phone}: –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ BAN (–Ω–µ—É–¥–∞—á: {fail_count})")
                await global_session_manager.remove_session_by_phone(phone)
            else:
                logger.debug(f"‚ö†Ô∏è {phone}: –Ω–µ—É–¥–∞—á–∞ {fail_count}/3 ({task_type})")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è {phone}: {e}")
    
    async def _add_to_retry_queue(self, task: Dict, task_type: str, delay: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            task['retry_count'] = task.get('retry_count', 0) + 1
            task['task_type'] = task_type
            task['retry_after'] = time.time() + delay + random.uniform(60, 300)
            
            if task['retry_count'] <= self.max_retries:
                self.redis_client.lpush('retry_tasks', json.dumps(task))
                logger.debug(f"üîÑ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ retry (–ø–æ–ø—ã—Ç–∫–∞ {task['retry_count']}/{self.max_retries})")
            else:
                logger.warning(f"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ retry: {e}")
    
    async def _process_retry_tasks(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            current_time = time.time()
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ retry –∑–∞–¥–∞—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            max_retry = {
                'conservative': 20,
                'adaptive': 50,
                'aggressive': 80
            }.get(self.performance_mode, 50)
            
            for _ in range(max_retry):
                task_data = self.redis_client.rpop('retry_tasks')
                if not task_data:
                    break
                
                try:
                    task = json.loads(task_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∞
                    if task.get('retry_after', 0) <= current_time:
                        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –≤—ã–ø–æ–ª–Ω—è–µ–º
                        if task['task_type'] == 'view':
                            await self._execute_view_task(task)
                        elif task['task_type'] == 'subscription':
                            await self._execute_subscription_task(task)
                    else:
                        # –í—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        self.redis_client.lpush('retry_tasks', task_data)
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def reload_sessions(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π"""
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...")
        try:
            await global_session_manager.shutdown()
            await self._try_preload_sessions()
            
            if self.sessions_loaded:
                logger.info("‚úÖ –°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
        self.running = False
    
    async def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            await global_session_manager.shutdown()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            if self.redis_client:
                self.redis_client.close()
            
            logger.info("‚úÖ –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
TaskWorker = ShardedTaskWorker

# –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞"""
    worker = ShardedTaskWorker()
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await worker.stop()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uvloop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        import uvloop
        uvloop.install()
        logger.info("‚úÖ uvloop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.info("‚ö†Ô∏è uvloop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π event loop")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
    asyncio.run(main())
