import asyncio
import asyncpg
from redis import Redis
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def clear_database():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await asyncpg.connect(
            user='root',
            password='5f03f8eeb9:fx',
            database='arto_db',
            host='92.255.76.235',
            port='5432'
        )
        
        logger.info("üîç –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ë–î")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        accounts_count = await conn.fetchval("SELECT COUNT(*) FROM accounts")
        channels_count = await conn.fetchval("SELECT COUNT(*) FROM channels")
        languages_count = await conn.fetchval("SELECT COUNT(*) FROM languages")
        
        logger.info(f"üìä –î–æ —É–¥–∞–ª–µ–Ω–∏—è:")
        logger.info(f"   üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {accounts_count}")
        logger.info(f"   üì∫ –ö–∞–Ω–∞–ª—ã: {channels_count}")
        logger.info(f"   üåê –Ø–∑—ã–∫–∏: {languages_count}")
        
        if accounts_count == 0 and channels_count == 0:
            logger.info("‚úÖ –ë–î —É–∂–µ –ø—É—Å—Ç–∞—è")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ö†Ô∏è –£–î–ê–õ–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        if confirm != 'YES':
            logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        logger.info("üóëÔ∏è –û—á–∏—â–∞—é –ë–î...")
        
        # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
        await conn.execute("DELETE FROM accounts")
        logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
        
        await conn.execute("DELETE FROM channels")
        logger.info("‚úÖ –ö–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        await conn.execute("DELETE FROM statistics")
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –Ø–∑—ã–∫–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –æ–Ω–∏ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è
        # await conn.execute("DELETE FROM languages")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ AUTO_INCREMENT
        await conn.execute("ALTER SEQUENCE accounts_id_seq RESTART WITH 1")
        await conn.execute("ALTER SEQUENCE channels_id_seq RESTART WITH 1") 
        await conn.execute("ALTER SEQUENCE statistics_id_seq RESTART WITH 1")
        
        logger.info("‚úÖ –ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
        await conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

def clear_redis():
    """–û—á–∏—Å—Ç–∫–∞ Redis"""
    try:
        redis_client = Redis(
            host='127.0.0.1',
            port=6389,
            password='mybotredis2024',
            decode_responses=True
        )
        
        logger.info("üîç –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Redis")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        task_queues = [
            'delayed_view_batches',
            'subscription_tasks', 
            'retry_tasks'
        ]
        
        total_tasks = 0
        queue_stats = {}
        
        for queue in task_queues:
            count = redis_client.llen(queue)
            queue_stats[queue] = count
            total_tasks += count
        
        logger.info(f"üìä –ó–∞–¥–∞—á –≤ Redis:")
        for queue, count in queue_stats.items():
            logger.info(f"   üìã {queue}: {count}")
        logger.info(f"   üìä –í—Å–µ–≥–æ: {total_tasks}")
        
        if total_tasks == 0:
            logger.info("‚úÖ Redis —É–∂–µ –ø—É—Å—Ç–æ–π")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ö†Ô∏è –£–î–ê–õ–ò–¢–¨ –í–°–ï {total_tasks} –ó–ê–î–ê–ß? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        if confirm != 'YES':
            logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ Redis –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        logger.info("üóëÔ∏è –û—á–∏—â–∞—é Redis...")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        for queue in task_queues:
            deleted = redis_client.delete(queue)
            logger.info(f"‚úÖ {queue}: —É–¥–∞–ª–µ–Ω–æ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Å—Å–∏—è–º–∏
        session_keys = redis_client.keys('session:*')
        if session_keys:
            redis_client.delete(*session_keys)
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(session_keys)} –∫–ª—é—á–µ–π —Å–µ—Å—Å–∏–π")
        
        logger.info("‚úÖ Redis –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
        redis_client.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")

async def main():
    print("üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:
1 - –¢–æ–ª—å–∫–æ –ë–î (–∞–∫–∫–∞—É–Ω—Ç—ã, –∫–∞–Ω–∞–ª—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
2 - –¢–æ–ª—å–∫–æ Redis (–≤—Å–µ –∑–∞–¥–∞—á–∏)  
3 - –í–°–Å (–ë–î + Redis)
4 - –û—Ç–º–µ–Ω–∞

–í–∞—à –≤—ã–±–æ—Ä (1-4): """)
    
    if choice == '1':
        await clear_database()
    elif choice == '2':
        clear_redis()
    elif choice == '3':
        await clear_database()
        clear_redis()
    elif choice == '4':
        logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    asyncio.run(main())
