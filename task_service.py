import asyncio
import logging
import time
import random
import json
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum

from config import read_setting, find_english_word
from database import get_accounts_by_lang, get_channels_by_lang
from exceptions import TaskProcessingError

logger = logging.getLogger(__name__)

class TaskType(Enum):
    VIEW = "view"
    SUBSCRIBE = "subscribe"

@dataclass
class TaskItem:
    account_session: str
    phone: str
    channel: str  
    lang: str
    task_type: TaskType
    post_id: Optional[int] = None
    execute_at: Optional[float] = None
    retry_count: int = 0

class TaskService:
    def __init__(self):
        self.redis_client = None
        self._init_redis()
        
    def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"""
        try:
            from redis import Redis
            from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
            
            self.redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        
    def get_view_duration(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        hours = read_setting('followPeriod.txt', 3.0)
        return int(hours * 3600)
        
    async def create_view_tasks_for_post(self, channel_username: str, post_id: int) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        results = {
            'total_tasks': 0,
            'languages': 0
        }
        
        try:
            view_duration = self.get_view_duration()
            view_hours = view_duration / 3600
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {view_hours} —á–∞—Å–æ–≤ –¥–ª—è @{channel_username}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î
            languages = await self._get_channel_languages(channel_username)
            if not languages:
                logger.error(f"‚õî –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return results
            
            results['languages'] = len(languages)
            all_tasks = []
            
            # 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏–∑ –ë–î
            for lang in languages:
                english_lang = find_english_word(lang)
                accounts = await get_accounts_by_lang(english_lang, 'active')
                
                if not accounts:
                    logger.warning(f"‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {lang}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
                for account in accounts:
                    task = TaskItem(
                        account_session=account['session_data'],
                        phone=account['phone_number'],
                        channel=channel_username,
                        lang=english_lang,
                        task_type=TaskType.VIEW,
                        post_id=post_id
                    )
                    all_tasks.append(task)
            
            results['total_tasks'] = len(all_tasks)
            
            if not all_tasks:
                logger.warning("‚ö† –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
                return results
            
            # 3. –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            await self._schedule_view_tasks_simple(all_tasks, view_duration)
            
            logger.info(f"""
‚úÖ –°–æ–∑–¥–∞–Ω–æ {results['total_tasks']} –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
   üì∫ –ü–æ—Å—Ç: {post_id}
   üåê –Ø–∑—ã–∫–æ–≤: {results['languages']}  
   ‚è∞ –ü–µ—Ä–∏–æ–¥: {view_hours} —á–∞—Å–æ–≤""")
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            raise TaskProcessingError(f"Failed to create view tasks: {e}")
    
    async def _get_channel_languages(self, channel_username: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î"""
        try:
            from database import db_session
            async with db_session() as conn:
                results = await conn.fetch(
                    'SELECT DISTINCT lang FROM channels WHERE name = $1',
                    channel_username
                )
                return [result['lang'] for result in results]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: {e}")
            return []
    
    async def _schedule_view_tasks_simple(self, tasks: List[TaskItem], duration_seconds: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –µ–¥–∏–Ω—É—é Redis –æ—á–µ—Ä–µ–¥—å"""
        if not tasks:
            return
        
        try:
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
            random.shuffle(tasks)
            current_time = time.time()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if len(tasks) > 1:
                interval = duration_seconds / len(tasks)
                interval = max(interval, 30)  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                interval = min(interval, 120)  # –ú–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
            else:
                interval = 0
            
            logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: {interval:.1f} —Å–µ–∫—É–Ω–¥")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Redis
            tasks_data = {}
            
            for idx, task in enumerate(tasks):
                execute_at = current_time + (idx * interval)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é
                randomization = random.uniform(-interval * 0.1, interval * 0.1)
                execute_at += randomization
                execute_at = max(execute_at, current_time + 10)  # –ú–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫
                
                task.execute_at = execute_at
                
                task_data = {
                    'account_session': task.account_session,
                    'phone': task.phone,
                    'channel': task.channel,
                    'lang': task.lang,
                    'task_type': task.task_type.value,
                    'post_id': task.post_id,
                    'execute_at': execute_at,
                    'retry_count': task.retry_count,
                    'created_at': time.time()
                }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º execute_at –∫–∞–∫ score –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                tasks_data[json.dumps(task_data)] = execute_at
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –µ–¥–∏–Ω—É—é sorted set
            if tasks_data:
                self.redis_client.zadd("task_queue", tasks_data)
                
                # TTL –Ω–∞ 48 —á–∞—Å–æ–≤
                self.redis_client.expire("task_queue", 48 * 3600)
                
                first_time = min(tasks_data.values())
                last_time = max(tasks_data.values())
                
                logger.info(f"""
üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ task_queue:
   ‚è∞ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: —á–µ—Ä–µ–∑ {(first_time - current_time)/60:.1f} –º–∏–Ω
   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: —á–µ—Ä–µ–∑ {(last_time - current_time)/60:.1f} –º–∏–Ω
   üìä –ü–µ—Ä–∏–æ–¥: {(last_time - first_time)/3600:.2f} —á–∞—Å–æ–≤
                """)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            raise TaskProcessingError(f"Failed to schedule view tasks: {e}")
    
    async def create_subscription_tasks(self, channel_name: str, target_lang: str) -> Dict[str, int]:
        results = {
            'total_tasks': 0,
            'accounts_processed': 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —è–∑—ã–∫–∞ –∏–∑ –ë–î
            english_lang = find_english_word(target_lang)
            accounts = await get_accounts_by_lang(english_lang, 'active')
            
            if not accounts:
                logger.warning(f"‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {target_lang}")
                return results
            
            results['accounts_processed'] = len(accounts)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            base_delay = read_setting('lag.txt', 14.0) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            range_val = read_setting('range.txt', 5.0) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            timeout_count = int(read_setting('timeout_count.txt', 3.0))
            timeout_duration = read_setting('timeout_duration.txt', 13.0) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            logger.info(f"""
üì∫ –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß –ü–û–î–ü–ò–°–ö–ò –î–õ–Ø @{channel_name}:
   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}
   üåê –Ø–∑—ã–∫: {target_lang}
   ‚è∞ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {base_delay/60:.1f} –º–∏–Ω
   üé≤ –†–∞–∑–±—Ä–æ—Å: ¬±{range_val/60:.1f} –º–∏–Ω
   üî¢ –ü–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã: {timeout_count}
   ‚è∏Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {timeout_duration/60:.1f} –º–∏–Ω""")
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
            random.shuffle(accounts)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            subscription_tasks = []
            current_time = time.time()
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ = —Å—Ä–∞–∑—É
            next_execute_time = current_time
            
            for account_idx, account in enumerate(accounts):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º execute_at –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if account_idx == 0:
                    # –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - —Å—Ä–∞–∑—É
                    execute_at = next_execute_time
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                    if account_idx % timeout_count == 0:
                        # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö timeout_count –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É
                        pause_delay = timeout_duration
                        logger.debug(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {timeout_duration/60:.1f} –º–∏–Ω –ø–æ—Å–ª–µ {account_idx} –ø–æ–¥–ø–∏—Å–æ–∫")
                    else:
                        pause_delay = 0
                    
                    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Ä–∞–∑–±—Ä–æ—Å + –≤–æ–∑–º–æ–∂–Ω–∞—è –ø–∞—É–∑–∞
                    random_variation = random.uniform(-range_val, range_val)
                    total_delay = base_delay + random_variation + pause_delay
                    
                    execute_at = next_execute_time + total_delay
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                next_execute_time = execute_at
                
                task = TaskItem(
                    account_session=account['session_data'],
                    phone=account['phone_number'],
                    channel=channel_name,
                    lang=english_lang,
                    task_type=TaskType.SUBSCRIBE,
                    execute_at=execute_at
                )
                
                subscription_tasks.append(task)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–¥–∞—á
                if account_idx < 5:
                    delay_from_start = (execute_at - current_time) / 60
                    logger.debug(f"üìã {account['phone_number']}: —á–µ—Ä–µ–∑ {delay_from_start:.1f} –º–∏–Ω")
            
            results['total_tasks'] = len(subscription_tasks)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤ —Ç—É –∂–µ –æ—á–µ—Ä–µ–¥—å —á—Ç–æ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            await self._schedule_subscription_tasks_simple(subscription_tasks)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            if subscription_tasks:
                first_time = min(task.execute_at for task in subscription_tasks)
                last_time = max(task.execute_at for task in subscription_tasks)
                duration_hours = (last_time - first_time) / 3600
                
                logger.info(f"""
‚úÖ –°–æ–∑–¥–∞–Ω–æ {results['total_tasks']} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏:
   üì∫ –ö–∞–Ω–∞–ª: @{channel_name}
   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {results['accounts_processed']}
   ‚è∞ –ü–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: —Å—Ä–∞–∑—É
   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞: —á–µ—Ä–µ–∑ {duration_hours:.1f} —á–∞—Å–æ–≤
   üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours:.1f} —á–∞—Å–æ–≤""")
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            raise TaskProcessingError(f"Failed to create subscription tasks: {e}")
    
    async def _schedule_subscription_tasks_simple(self, tasks: List[TaskItem]):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å"""
        try:
            tasks_data = {}
            
            for task in tasks:
                task_data = {
                    'account_session': task.account_session,
                    'phone': task.phone,
                    'channel': task.channel,
                    'lang': task.lang,
                    'task_type': task.task_type.value,
                    'execute_at': task.execute_at,
                    'retry_count': task.retry_count,
                    'created_at': time.time()
                }
                
                tasks_data[json.dumps(task_data)] = task.execute_at
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É –∂–µ –æ—á–µ—Ä–µ–¥—å —á—Ç–æ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            if tasks_data:
                self.redis_client.zadd("task_queue", tasks_data)
                
                # TTL –Ω–∞ 48 —á–∞—Å–æ–≤
                self.redis_client.expire("task_queue", 48 * 3600)
                
                logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –≤ task_queue")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            raise TaskProcessingError(f"Failed to schedule subscription tasks: {e}")
    
    async def create_subscription_tasks_for_new_accounts(self, accounts: List[Dict], target_lang: str) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —è–∑—ã–∫–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        subscription_stats = {
            'channels_found': 0,
            'tasks_created': 0,
            'accounts_processed': 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã —è–∑—ã–∫–∞ –∏–∑ –ë–î
            channels = await get_channels_by_lang(target_lang)
            
            if not channels:
                logger.info(f"üì∫ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {target_lang}")
                return subscription_stats
            
            subscription_stats['channels_found'] = len(channels)
            subscription_stats['accounts_processed'] = len(accounts)
            
            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            total_tasks_created = 0
            
            for channel_name in channels:
                try:
                    channel_tasks = await self._create_subscription_tasks_for_channel(
                        channel_name, accounts, target_lang
                    )
                    
                    total_tasks_created += channel_tasks
                    logger.debug(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name}: {channel_tasks} –∑–∞–¥–∞—á")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è @{channel_name}: {e}")
            
            subscription_stats['tasks_created'] = total_tasks_created
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {total_tasks_created} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return subscription_stats
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return subscription_stats
    
    async def _create_subscription_tasks_for_channel(self, channel_name: str, accounts: List[Dict], target_lang: str) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            if not accounts:
                return 0
            
            english_lang = find_english_word(target_lang)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–µ–∫
            base_delay = read_setting('lag.txt', 14.0) * 60
            range_val = read_setting('range.txt', 5.0) * 60
            timeout_count = int(read_setting('timeout_count.txt', 3.0))
            timeout_duration = read_setting('timeout_duration.txt', 13.0) * 60
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            shuffled_accounts = accounts.copy()
            random.shuffle(shuffled_accounts)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            subscription_tasks = []
            current_time = time.time()
            next_execute_time = current_time
            
            for account_idx, account in enumerate(shuffled_accounts):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if account_idx == 0:
                    execute_at = next_execute_time
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞—É–∑–∞
                    if account_idx % timeout_count == 0:
                        pause_delay = timeout_duration
                    else:
                        pause_delay = 0
                    
                    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Ä–∞–∑–±—Ä–æ—Å + –ø–∞—É–∑–∞
                    random_variation = random.uniform(-range_val, range_val)
                    total_delay = base_delay + random_variation + pause_delay
                    
                    execute_at = next_execute_time + total_delay
                
                next_execute_time = execute_at
                
                task_data = {
                    'account_session': account['session_data'],
                    'phone': account['phone_number'],
                    'channel': channel_name,
                    'lang': english_lang,
                    'task_type': 'subscribe',
                    'execute_at': execute_at,
                    'retry_count': 0,
                    'created_at': time.time()
                }
                
                subscription_tasks.append(task_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            await self._save_tasks_to_redis(subscription_tasks)
            
            return len(subscription_tasks)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
            return 0
    
    async def _save_tasks_to_redis(self, tasks: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ Redis"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Redis
            tasks_data = {}
            
            for task in tasks:
                task_json = json.dumps(task)
                execute_at = task['execute_at']
                tasks_data[task_json] = execute_at
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            if tasks_data:
                self.redis_client.zadd("task_queue", tasks_data)
                self.redis_client.expire("task_queue", 48 * 3600)  # TTL 48 —á–∞—Å–æ–≤
                
                logger.debug(f"üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ Redis")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ Redis: {e}")
    
    async def get_task_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –∏–∑ –æ–±—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
        try:
            current_time = time.time()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            total_tasks = self.redis_client.zcard("task_queue") or 0
            
            # –ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
            ready_tasks = self.redis_client.zcount("task_queue", 0, current_time) or 0
            
            # –ë—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
            future_tasks = total_tasks - ready_tasks
            
            # Retry –∑–∞–¥–∞—á–∏
            retry_tasks = self.redis_client.llen("retry_tasks") or 0
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            sample_tasks = self.redis_client.zrangebyscore(
                "task_queue", 0, '+inf', start=0, num=100
            )
            
            view_count = 0
            subscribe_count = 0
            
            for task_json in sample_tasks:
                try:
                    task_data = json.loads(task_json)
                    task_type = task_data.get('task_type', '')
                    if task_type == 'view':
                        view_count += 1
                    elif task_type == 'subscribe':
                        subscribe_count += 1
                except:
                    pass
            
            return {
                'total_tasks': total_tasks,
                'ready_tasks': ready_tasks,
                'future_tasks': future_tasks,
                'retry_tasks': retry_tasks,
                'queue_name': 'task_queue',
                'sample_views': view_count,
                'sample_subscribes': subscribe_count
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
            return {}
    
    async def get_detailed_task_analysis(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            current_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample_tasks = self.redis_client.zrangebyscore(
                "task_queue", 
                min=0, 
                max='+inf',
                withscores=True,
                start=0, 
                num=500
            )
            
            analysis = {
                'total_analyzed': len(sample_tasks),
                'by_type': {'view': 0, 'subscribe': 0, 'unknown': 0},
                'by_timing': {
                    'ready_now': 0,
                    'ready_5min': 0,
                    'ready_1hour': 0,
                    'future': 0
                },
                'by_language': {},
                'oldest_task': None,
                'newest_task': None
            }
            
            for task_json, execute_at in sample_tasks:
                try:
                    task_data = json.loads(task_json)
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
                    task_type = task_data.get('task_type', 'unknown')
                    analysis['by_type'][task_type] = analysis['by_type'].get(task_type, 0) + 1
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    time_diff = execute_at - current_time
                    if time_diff <= 0:
                        analysis['by_timing']['ready_now'] += 1
                    elif time_diff <= 300:  # 5 –º–∏–Ω—É—Ç
                        analysis['by_timing']['ready_5min'] += 1
                    elif time_diff <= 3600:  # 1 —á–∞—Å
                        analysis['by_timing']['ready_1hour'] += 1
                    else:
                        analysis['by_timing']['future'] += 1
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ —è–∑—ã–∫–∞–º
                    lang = task_data.get('lang', 'unknown')
                    analysis['by_language'][lang] = analysis['by_language'].get(lang, 0) + 1
                    
                    # –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                    created_at = task_data.get('created_at', execute_at)
                    if analysis['oldest_task'] is None or created_at < analysis['oldest_task']:
                        analysis['oldest_task'] = created_at
                    if analysis['newest_task'] is None or created_at > analysis['newest_task']:
                        analysis['newest_task'] = created_at
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏: {e}")
                    continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamps
            if analysis['oldest_task']:
                analysis['oldest_task'] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(analysis['oldest_task']))
            if analysis['newest_task']:
                analysis['newest_task'] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(analysis['newest_task']))
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á: {e}")
            return {}
    
    async def cleanup_expired_tasks(self, max_age_hours: float = 48.0) -> int:
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            cutoff_time = time.time() - (max_age_hours * 3600)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            expired_tasks = self.redis_client.zrangebyscore(
                "task_queue",
                min=0,
                max=cutoff_time,
                start=0,
                num=1000
            )
            
            cleaned_count = 0
            if expired_tasks:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for task_json in expired_tasks:
                    self.redis_client.zrem("task_queue", task_json)
                    cleaned_count += 1
                
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleaned_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (>{max_age_hours}—á)")
            
            return cleaned_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä 
task_service = TaskService()