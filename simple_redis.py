#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —à–∞—Ä–¥–∞–º–∏ –≤ Redis
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ—á–µ—Ä–µ–¥—è–º–∏
"""

import json
import time
from redis import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6389
REDIS_PASSWORD = 'mybotredis2024'  # –ò–∑ vars/password.txt

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REDIS –®–ê–†–î–û–í")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        redis_client = Redis(
            host=REDIS_HOST,
            port=REDIS_PORT,
            password=REDIS_PASSWORD,
            decode_responses=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        redis_client.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        current_time = time.time()
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} ({time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(current_time))})")
        
        # ========== –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –®–ê–†–î–û–í ==========
        print("\nüìä –ê–ö–¢–ò–í–ù–´–ï –®–ê–†–î–´:")
        
        # –®–∞—Ä–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        view_shards_count = redis_client.zcard("active_view_shards")
        print(f"   üëÄ –®–∞—Ä–¥–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {view_shards_count}")
        
        # –®–∞—Ä–¥—ã –ø–æ–¥–ø–∏—Å–æ–∫
        sub_shards_count = redis_client.zcard("active_subscription_shards")
        print(f"   üì∫ –®–∞—Ä–¥–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫: {sub_shards_count}")
        
        if view_shards_count == 0 and sub_shards_count == 0:
            print("‚ùå –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –®–ê–†–î–û–í! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ù–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö")
            print("   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —à–∞—Ä–¥–æ–≤ –≤ task_service.py")
            print("   3. –®–∞—Ä–¥—ã –∏—Å—Ç–µ–∫–ª–∏ –∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
            return
        
        # ========== –ê–ù–ê–õ–ò–ó –®–ê–†–î–û–í –ü–†–û–°–ú–û–¢–†–û–í ==========
        if view_shards_count > 0:
            print(f"\nüîç –ê–ù–ê–õ–ò–ó {view_shards_count} –®–ê–†–î–û–í –ü–†–û–°–ú–û–¢–†–û–í:")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞—Ä–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            all_view_shards = redis_client.zrangebyscore(
                "active_view_shards",
                min=0,
                max='+inf',
                withscores=True
            )
            
            print(f"   üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ active_view_shards: {len(all_view_shards)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ —à–∞—Ä–¥—ã (–∫–∞–∫ –≤ –≤–æ—Ä–∫–µ—Ä–µ)
            ready_view_shards = redis_client.zrangebyscore(
                "active_view_shards",
                min=0,
                max=current_time + 1800,  # +30 –º–∏–Ω—É—Ç
                withscores=False,
                start=0,
                num=10
            )
            
            print(f"   ‚è∞ –ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–≤—Ä–µ–º—è <= {current_time + 1800}): {len(ready_view_shards)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞—Ä–¥–∞
            for i, (shard_meta_json, score) in enumerate(all_view_shards[:3]):
                print(f"\n   üì¶ –®–ê–†–î {i+1}:")
                try:
                    shard_meta = json.loads(shard_meta_json)
                    shard_key = shard_meta['shard_key']
                    shard_start_time = shard_meta.get('start_time', 0)
                    post_id = shard_meta.get('post_id', 'unknown')
                    
                    print(f"      üîë –ö–ª—é—á: {shard_key}")
                    print(f"      üìù –ü–æ—Å—Ç ID: {post_id}")
                    print(f"      ‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shard_start_time} ({time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(shard_start_time))})")
                    print(f"      üìä Score –≤ ZSET: {score}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞—Ä–¥–∞
                    shard_size = redis_client.zcard(shard_key)
                    print(f"      üìã –ó–∞–¥–∞—á –≤ —à–∞—Ä–¥–µ: {shard_size}")
                    
                    if shard_size > 0:
                        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                        ready_tasks = redis_client.zrangebyscore(
                            shard_key,
                            min=0,
                            max=current_time,
                            withscores=True,
                            start=0,
                            num=3
                        )
                        
                        print(f"      ‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á (–≤—Ä–µ–º—è <= {current_time}): {len(ready_tasks)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏
                        if ready_tasks:
                            task_json, task_score = ready_tasks[0]
                            try:
                                task_data = json.loads(task_json)
                                print(f"      üìÑ –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏:")
                                print(f"         üì± –¢–µ–ª–µ—Ñ–æ–Ω: {task_data.get('tasks', [{}])[0].get('phone', 'N/A')}")
                                print(f"         üì∫ –ö–∞–Ω–∞–ª: {task_data.get('tasks', [{}])[0].get('channel', 'N/A')}")
                                print(f"         ‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_score}")
                            except:
                                print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–¥–∞—á—É")
                        
                        # –í—Å–µ –∑–∞–¥–∞—á–∏ –≤ —à–∞—Ä–¥–µ
                        all_tasks = redis_client.zrangebyscore(
                            shard_key,
                            min=0,
                            max='+inf',
                            withscores=True,
                            start=0,
                            num=5
                        )
                        
                        if all_tasks:
                            earliest_time = min(score for _, score in all_tasks)
                            latest_time = max(score for _, score in all_tasks)
                            print(f"      üïê –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á:")
                            print(f"         –†–∞–Ω–Ω–µ–µ: {earliest_time} ({time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(earliest_time))})")
                            print(f"         –ü–æ–∑–¥–Ω–µ–µ: {latest_time} ({time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(latest_time))})")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –∑–∞–¥–∞—á–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã
                            if earliest_time > current_time:
                                wait_time = (earliest_time - current_time) / 60
                                print(f"      ‚è≥ –ó–ê–î–ê–ß–ò –ï–©–ï –ù–ï –ì–û–¢–û–í–´! –ñ–¥–∞—Ç—å: {wait_time:.1f} –º–∏–Ω—É—Ç")
                            else:
                                print(f"      ‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã!")
                    else:
                        print(f"      ‚ùå –®–ê–†–î –ü–£–°–¢–û–ô!")
                    
                except Exception as e:
                    print(f"      üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞—Ä–¥–∞: {e}")
                    print(f"      üìÑ Raw data: {shard_meta_json[:100]}...")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if all_view_shards:
                future_shards = [s for s in all_view_shards if s[1] > current_time + 1800]
                print(f"\n   üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò:")
                print(f"      ‚è∞ –ì–æ—Ç–æ–≤—ã—Ö —Å–µ–π—á–∞—Å: {len(ready_view_shards)}")
                print(f"      üîÆ –ë—É–¥—É—â–∏—Ö (>30 –º–∏–Ω): {len(future_shards)}")
                
                if future_shards:
                    next_time = min(s[1] for s in future_shards)
                    wait_minutes = (next_time - current_time) / 60
                    print(f"      ‚è≥ –°–ª–µ–¥—É—é—â–∏–π —à–∞—Ä–¥ —á–µ—Ä–µ–∑: {wait_minutes:.1f} –º–∏–Ω—É—Ç")
        
        # ========== –ü–†–û–í–ï–†–ö–ê –î–†–£–ì–ò–• –û–ß–ï–†–ï–î–ï–ô ==========
        print(f"\nüìã –î–†–£–ì–ò–ï –û–ß–ï–†–ï–î–ò:")
        retry_count = redis_client.llen("retry_tasks")
        print(f"   üîÑ Retry –∑–∞–¥–∞—á: {retry_count}")
        
        # –ö–æ–º–∞–Ω–¥—ã –≤–æ—Ä–∫–µ—Ä–∞
        worker_commands = redis_client.llen("worker_commands")
        print(f"   üí¨ –ö–æ–º–∞–Ω–¥ –≤–æ—Ä–∫–µ—Ä—É: {worker_commands}")
        
        # ========== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ==========
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if view_shards_count == 0:
            print("   1. ‚ùå –ù–µ—Ç —à–∞—Ä–¥–æ–≤ - —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
            print("   2. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ª–∏ —à–∞—Ä–¥—ã –≤ task_service.py")
        elif len(ready_view_shards) == 0:
            print("   1. ‚è∞ –í—Å–µ —à–∞—Ä–¥—ã –≤ –±—É–¥—É—â–µ–º - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è")
            print("   2. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É followPeriod.txt")
        else:
            print("   1. ‚úÖ –®–∞—Ä–¥—ã –≥–æ—Ç–æ–≤—ã - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ")
            print("   2. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É _process_view_shards() –≤ worker.py")
            print("   3. üêõ –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏—è–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        print(f"\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò:")
        print(f"   redis-cli -h {REDIS_HOST} -p {REDIS_PORT} -a {REDIS_PASSWORD}")
        print(f"   ZCARD active_view_shards")
        print(f"   ZRANGE active_view_shards 0 2 WITHSCORES")
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –≤ config.py")
        print("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Redis")
        print("   3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è")

if __name__ == "__main__":
    main()
