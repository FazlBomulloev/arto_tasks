import asyncio
import logging
import json
import random
import time
from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, FSInputFile,
    InlineKeyboardButton as IKB, InlineKeyboardMarkup as IKM
)
from aiogram.utils.keyboard import InlineKeyboardBuilder as IKBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatType

# –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def safe_edit_message(message, text, parse_mode=None, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.edit_text(
            text=text,
            parse_mode=parse_mode,
            reply_markup=reply_markup
        )
    except Exception as e:
        error_text = str(e).lower()
        if "message is not modified" in error_text or "not modified" in error_text:
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ)")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(text=text, parse_mode=parse_mode, reply_markup=reply_markup)
            except:
                pass

from config import get_whitelist, find_english_word, find_russian_word, write_setting, read_setting
from database import (
    get_all_languages, add_language, get_channels_by_lang, add_channel,
    get_account_stats, get_accounts_by_lang, get_banned_accounts_24h
)
from account_service import account_service
from task_service import task_service
from exceptions import AccountValidationError, TaskProcessingError

logger = logging.getLogger(__name__)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
def whitelist_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist"""
    async def wrapper(call_or_message, *args, **kwargs):
        user_id = str(call_or_message.from_user.id)
        whitelist = get_whitelist()
        
        if user_id not in whitelist:
            if hasattr(call_or_message, 'answer'):  # CallbackQuery
                await call_or_message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.", show_alert=True)
            else:  # Message
                await call_or_message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
            return
        
        return await func(call_or_message, *args, **kwargs)
    return wrapper

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BotStates(StatesGroup):
    # –Ø–∑—ã–∫–∏
    waiting_channel_name = State()
    waiting_accounts_count = State()
    waiting_zip_file = State() 
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    waiting_setting_value = State()
    
    # –ê–∫–∫–∞—É–Ω—Ç—ã
    waiting_delete_count = State()

# –†–æ—É—Ç–µ—Ä—ã
main_router = Router()
lang_router = Router()
account_router = Router()
settings_router = Router()
stats_router = Router()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@main_router.message(Command('start'))
async def start_command(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π whitelist"""
    await state.clear()
    
    user_id = str(message.from_user.id)
    whitelist = get_whitelist()
    
    if user_id not in whitelist:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
        return
    
    keyboard = IKM(inline_keyboard=[
        [IKB(text='üåê –Ø–ó–´–ö–ò', callback_data='languages')],
        [IKB(text='üë• –ê–ö–ö–ê–£–ù–¢–´', callback_data='accounts')],
        [IKB(text='‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò', callback_data='settings')],
        [IKB(text='üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê', callback_data='statistics')]
    ])
    
    await message.answer(
        "<b>ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n"
        "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@main_router.callback_query(F.data == 'main_menu')
async def back_to_main(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
    user_id = str(call.from_user.id)
    whitelist = get_whitelist()
    
    if user_id not in whitelist:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.", show_alert=True)
        return
    
    keyboard = IKM(inline_keyboard=[
        [IKB(text='üåê –Ø–ó–´–ö–ò', callback_data='languages')],
        [IKB(text='üë• –ê–ö–ö–ê–£–ù–¢–´', callback_data='accounts')],
        [IKB(text='‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò', callback_data='settings')],
        [IKB(text='üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê', callback_data='statistics')]
    ])
    
    await call.message.edit_text(
        "<b>ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n"
        "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
        ,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await call.answer()


# –Ø–ó–´–ö–ò –ò –ö–ê–ù–ê–õ–´
@whitelist_required
@lang_router.callback_query(F.data == 'languages')
async def languages_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏"""
    try:
        languages = await get_all_languages()
        
        keyboard = IKBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤
        for lang in languages:
            keyboard.add(IKB(text=lang, callback_data=f'lang:{lang}'))
        keyboard.adjust(2)
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard.row(IKB(text='‚ûï –î–û–ë–ê–í–ò–¢–¨ –Ø–ó–´–ö', callback_data='add_language'))
        keyboard.row(IKB(text='üîô –ù–ê–ó–ê–î', callback_data='main_menu'))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text_parts = ["<b>üåê –£–ü–†–ê–í–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê–ú–ò</b>\n"]
        
        for lang in languages:
            english_lang = find_english_word(lang)
            accounts = await get_accounts_by_lang(english_lang, 'active')
            channels = await get_channels_by_lang(lang)
            
            text_parts.append(
                f"<b>{lang}</b> | –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)} | –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}"
            )
        
        if not languages:
            text_parts.append("<i>–Ø–∑—ã–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>")
        
        await safe_edit_message(
            call.message,
            "\n".join(text_parts),
            parse_mode='HTML',
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —è–∑—ã–∫–æ–≤: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –ê–ö–ö–ê–£–ù–¢–´
@account_router.callback_query(F.data == 'accounts')
async def accounts_menu(call: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        stats = await get_account_stats()
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –ü–û –°–¢–ê–¢–£–°–£', callback_data='delete_by_status')],
            [IKB(text='üì§ –≠–ö–°–ü–û–†–¢ –ê–ö–¢–ò–í–ù–´–•', callback_data='export_all_active')],
            [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='main_menu')]
        ])
        
        text = f"""<b>üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò</b>

<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats.get('total', 0)}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active', 0)}
‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {stats.get('pause', 0)}
üö´ –ó–∞–±–∞–Ω–µ–Ω—ã: {stats.get('ban', 0)}
"""
        
        await safe_edit_message(
            call.message,
            text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@lang_router.callback_query(F.data.startswith('lang:'))
async def language_details(call: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    try:
        lang = call.data.split(':', 1)[1]
        english_lang = find_english_word(lang)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        accounts = await get_accounts_by_lang(english_lang)
        channels = await get_channels_by_lang(lang)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        active_count = len([a for a in accounts if a['status'] == 'active'])
        pause_count = len([a for a in accounts if a['status']== 'pause'])
        ban_count = len([a for a in accounts if a['status'] == 'ban'])
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        channels_keyboard = IKBuilder()
        if channels:
            for ch in channels:
                channels_keyboard.row(
                    IKB(text=f"@{ch}", url=f"https://t.me/{ch}"),
                    IKB(text="üóëÔ∏è", callback_data=f'delete_channel:{lang}:{ch}')
                )
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='‚ûï –î–û–ë–ê–í–ò–¢–¨ –ö–ê–ù–ê–õ', callback_data=f'add_channel:{lang}')],
            [IKB(text='‚ûï –î–û–ë–ê–í–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢–´', callback_data=f'add_accounts:{lang}')],
            [IKB(text='üì§ –≠–ö–°–ü–û–†–¢ –ê–ö–¢–ò–í–ù–´–•', callback_data=f'export_accounts:{lang}')],
            [IKB(text='üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢–´', callback_data=f'manage_accounts:{lang}')],
            [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='languages')]
        ])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if channels:
            keyboard.inline_keyboard = channels_keyboard.as_markup().inline_keyboard + keyboard.inline_keyboard
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_text = ""
        if channels:
            channels_text = f"\n<b>üì∫ –ö–∞–Ω–∞–ª—ã ({len(channels)}):</b>\n"
            channels_text += "\n".join([f"‚Ä¢ @{ch}" for ch in channels])
        else:
            channels_text = "\n<b>üì∫ –ö–∞–Ω–∞–ª—ã:</b>\n<i>–ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>"
        
        text = f"""<b>üåê –Ø–ó–´–ö: {lang.upper()}</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}
‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {pause_count}  
üö´ –ó–∞–±–∞–Ω–µ–Ω—ã: {ban_count}
üì± –í—Å–µ–≥–æ: {len(accounts)}

{channels_text} """
        
        await safe_edit_message(
            call.message,
            text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π —è–∑—ã–∫–∞: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@lang_router.callback_query(F.data.startswith('add_channel:'))
async def add_channel_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    lang = call.data.split(':', 1)[1]
    
    keyboard = IKM(inline_keyboard=[
        [IKB(text='üîô –ù–ê–ó–ê–î', callback_data=f'lang:{lang}')]
    ])
    
    await call.message.edit_text(
        f"<b>‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê</b>\n\n"
        f"–Ø–∑—ã–∫: <b>{lang}</b>\n\n"
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>mychannel</code>)\n\n"
        f"‚ö° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —è–∑—ã–∫–∞",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    await state.set_state(BotStates.waiting_channel_name)
    await state.update_data(lang=lang, message_id=call.message.message_id)

@lang_router.message(BotStates.waiting_channel_name)
async def add_channel_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        data = await state.get_data()
        lang = data['lang']
        channel_name = message.text.strip().replace('@', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        success = await add_channel(channel_name, lang)
        
        await message.delete()
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                results = await task_service.create_subscription_tasks(channel_name, lang)
                
                keyboard = IKM(inline_keyboard=[
                    [IKB(text='üîô –ö –Ø–ó–´–ö–£', callback_data=f'lang:{lang}')]
                ])
                
                await message.answer(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª @{channel_name} –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {results['total_tasks']}\n"
                    f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: {results['accounts_processed']}\n\n",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            except Exception as e:
                keyboard = IKM(inline_keyboard=[
                    [IKB(text='üîô –ö –Ø–ó–´–ö–£', callback_data=f'lang:{lang}')]
                ])
                await message.answer(
                    f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î\n"
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)[:200]}",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_name}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
        await state.clear()

# === –ù–ê–°–¢–†–û–ô–ö–ò –°–ú–ï–®–ê–ù–ù–´–• –ë–ê–¢–ß–ï–ô ===
@settings_router.callback_query(F.data == 'settings')
async def settings_menu(call: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏"""
    try:
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ—à–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
        settings = {
            'view_period': read_setting('followPeriod.txt', 1.0),
            
            # –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            'view_reading_time': read_setting('view_reading_time.txt', 5.0),
            'view_connection_pause': read_setting('view_connection_pause.txt', 3.0),
            
            # –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
            'mixed_batch_size': int(read_setting('mixed_batch_size.txt', 500.0)),
            'mixed_batch_pause': read_setting('mixed_batch_pause.txt', 30.0),
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            'sub_lag': read_setting('lag.txt', 30.0),
            'sub_range': read_setting('range.txt', 5.0),
            'timeout_count': int(read_setting('timeout_count.txt', 4.0)),
            'timeout_duration': read_setting('timeout_duration.txt', 20.0),
            'accounts_delay': read_setting('accounts_delay.txt', 2.0)
        }
        
        keyboard = IKM(inline_keyboard=[
            # –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
            [IKB(text='üì¶ –†–ê–ó–ú–ï–† –°–ú–ï–®–ê–ù–ù–û–ì–û –ë–ê–¢–ß–ê', callback_data='set:mixed_batch_size.txt')],
            [IKB(text='‚è∏Ô∏è –ü–ê–£–ó–ê –ú–ï–ñ–î–£ –ë–ê–¢–ß–ê–ú–ò', callback_data='set:mixed_batch_pause.txt')],
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            [IKB(text='‚îÄ‚îÄ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–°–ú–û–¢–†–û–í ‚îÄ‚îÄ', callback_data='separator')],
            [IKB(text='üìñ –í–†–ï–ú–Ø –ü–†–û–°–ú–û–¢–†–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò', callback_data='set:view_reading_time.txt')],
            [IKB(text='üîå –ü–ê–£–ó–ê –ü–û–î–ö–õ–Æ–ß/–í–´–ö–õ–Æ–ß–ï–ù–ò–ï', callback_data='set:view_connection_pause.txt')],
            [IKB(text='‚è∞ –ü–ï–†–ò–û–î –ü–†–û–°–ú–û–¢–†–û–í', callback_data='set:followPeriod.txt')],
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            [IKB(text='‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–û–ö ‚îÄ‚îÄ', callback_data='separator')],
            [IKB(text='üìÖ –û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê', callback_data='set:lag.txt')],
            [IKB(text='üé≤ –†–ê–ó–ë–†–û–° –ü–û–î–ü–ò–°–ö–ò', callback_data='set:range.txt')],
            [IKB(text='‚è∞ –ó–ê–î–ï–†–ñ–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í', callback_data='set:accounts_delay.txt')],
            [IKB(text='üî¢ –ü–û–î–ü–ò–°–û–ö –î–û –ü–ê–£–ó–´', callback_data='set:timeout_count.txt')],
            [IKB(text='‚è∏Ô∏è –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–ê–£–ó–´', callback_data='set:timeout_duration.txt')],
            
            [IKB(text='üîÑ –û–ë–ù–û–í–ò–¢–¨ –í–°–ï', callback_data='force_settings_reload')],
            [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='main_menu')]
        ])
        
        text = f"""<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´</b>

<b>üì¶ –°–ú–ï–®–ê–ù–ù–´–ï –ë–ê–¢–ß–ò:</b>
üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {settings['mixed_batch_size']} –∑–∞–¥–∞—á (–ª—é–±—ã—Ö —Ç–∏–ø–æ–≤)
‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {settings['mixed_batch_pause']} —Å–µ–∫

<b>üëÄ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–°–ú–û–¢–†–û–í:</b>
üìñ –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {settings['view_reading_time']} —Å–µ–∫
üîå –ü–∞—É–∑–∞ –ø–æ–¥–∫–ª—é—á/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ: {settings['view_connection_pause']} —Å–µ–∫
‚è∞ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {settings['view_period']} —á–∞—Å

<b>üì∫ –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–û–ö:</b>
üìÖ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {settings['sub_lag']} –º–∏–Ω
üé≤ –†–∞–∑–±—Ä–æ—Å: {settings['sub_range']} –º–∏–Ω
‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {settings['accounts_delay']} –º–∏–Ω
üî¢ –ü–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã: {settings['timeout_count']}
‚è∏Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {settings['timeout_duration']} –º–∏–Ω

<b>üìã –õ–û–ì–ò–ö–ê –°–ú–ï–®–ê–ù–ù–û–ì–û –ë–ê–¢–ß–ê:</b>
‚Ä¢ –í –æ–¥–Ω–æ–º –±–∞—Ç—á–µ: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –ø–æ–¥–ø–∏—Å–∫–∏ (–ª—é–±–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
‚Ä¢ –í—Å–µ {settings['mixed_batch_size']} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è ‚Üí –ü–∞—É–∑–∞ {settings['view_connection_pause']}—Å ‚Üí –ü—Ä–æ—Å–º–æ—Ç—Ä {settings['view_reading_time']}—Å ‚Üí –ü–∞—É–∑–∞ {settings['view_connection_pause']}—Å ‚Üí –û—Ç–∫–ª—é—á–∏–ª—Å—è
‚Ä¢ –ú–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –ø–∞—É–∑–∞ {settings['mixed_batch_pause']}—Å"""
        
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@settings_router.callback_query(F.data.startswith('set:'))
async def setting_change_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π"""
    setting_file = call.data.split(':', 1)[1]
    
    setting_names = {
        # –ù–û–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ—à–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
        'mixed_batch_size.txt': '–†–∞–∑–º–µ—Ä —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤)',
        'mixed_batch_pause.txt': '–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)',
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        'view_reading_time.txt': '–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)',
        'view_connection_pause.txt': '–ü–∞—É–∑–∞ –ø–æ–¥–∫–ª—é—á/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã)',
        'followPeriod.txt': '–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—á–∞—Å—ã)',
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        'lag.txt': '–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∏–Ω—É—Ç—ã)',
        'range.txt': '–†–∞–∑–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∏–Ω—É—Ç—ã)',
        'accounts_delay.txt': '–ó–∞–¥–µ—Ä–∂–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–∏–Ω—É—Ç—ã)',
        'timeout_count.txt': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ –ø–∞—É–∑—ã',
        'timeout_duration.txt': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã (–º–∏–Ω—É—Ç—ã)'
    }
    
    setting_name = setting_names.get(setting_file, setting_file)
    current_value = read_setting(setting_file, 0)
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    hints = {
        'mixed_batch_size.txt': '\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 300-1000\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –ø–æ–¥–ø–∏—Å–∫–∏)',
        'mixed_batch_pause.txt': '\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 20-60 —Å–µ–∫—É–Ω–¥\n–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏',
        'view_reading_time.txt': '\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 3-8 —Å–µ–∫—É–Ω–¥\n–í—Ä–µ–º—è "—á—Ç–µ–Ω–∏—è" –ø–æ—Å—Ç–∞ –∫–∞–∂–¥—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º',
        'view_connection_pause.txt': '\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 2-5 —Å–µ–∫—É–Ω–¥\n–ü–∞—É–∑–∞ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è'
    }
    
    hint_text = hints.get(setting_file, '')
    
    keyboard = IKM(inline_keyboard=[
        [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='settings')]
    ])
    
    await call.message.edit_text(
        f"<b>‚öôÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>\n\n"
        f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä: <b>{setting_name}</b>\n"
        f"üî¢ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_value}</b>\n\n"
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:{hint_text}\n\n",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    await state.set_state(BotStates.waiting_setting_value)
    await state.update_data(setting_file=setting_file, setting_name=setting_name)

@settings_router.message(BotStates.waiting_setting_value)
async def setting_change_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        data = await state.get_data()
        setting_file = data['setting_file']
        setting_name = data['setting_name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            new_value = float(message.text.strip())
            if new_value < 0:
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        write_setting(setting_file, str(new_value))
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='üîô –ö –ù–ê–°–¢–†–û–ô–ö–ê–ú', callback_data='settings')]
        ])
        
        await message.delete()
        await message.answer(
            f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"üìù {setting_name}: <b>{new_value}</b>\n\n",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        await state.clear()

@settings_router.callback_query(F.data == 'force_settings_reload')
async def force_settings_reload(call: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≤–æ—Ä–∫–µ—Ä–µ"""
    try:
        progress_msg = await call.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</b>\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä—É...",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä—É —á–µ—Ä–µ–∑ Redis
        from redis import Redis
        from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
        
        redis_client = Redis(
            host=REDIS_HOST,
            port=REDIS_PORT,
            password=REDIS_PASSWORD,
            decode_responses=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Ä–∫–µ—Ä—É
        redis_client.lpush('worker_commands', json.dumps({
            'command': 'reload_settings',
            'timestamp': time.time()
        }))
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='üîô –ö –ù–ê–°–¢–†–û–ô–ö–ê–ú', callback_data='settings')]
        ])
        
        await progress_msg.edit_text(
            "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "üîÑ –í–æ—Ä–∫–µ—Ä –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "üìä –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞—á–∞–º\n\n",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

@settings_router.callback_query(F.data == 'separator')  
async def separator_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)"""
    await call.answer()

# === –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

async def get_simplified_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    try:
        from redis import Redis
        from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
        
        redis_client = Redis(
            host=REDIS_HOST,
            port=REDIS_PORT,
            password=REDIS_PASSWORD,
            decode_responses=True
        )
        
        current_time = time.time()
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∏–∑ Redis
        total_tasks = redis_client.zcard("task_queue") or 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –≤–æ—Ä–∫–µ—Ä–∞
        worker_stats_raw = redis_client.get('worker_stats')
        if worker_stats_raw:
            worker_stats = json.loads(worker_stats_raw)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            stats_age = current_time - worker_stats.get('timestamp', 0)
            if stats_age <= 300:  # 5 –º–∏–Ω—É—Ç
                tasks_last_60min = worker_stats.get('tasks_last_hour', 0)
                tasks_last_24h = worker_stats.get('tasks_last_24h', 0)
            else:
                tasks_last_60min = 0
                tasks_last_24h = 0
        else:
            tasks_last_60min = 0
            tasks_last_24h = 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∑–∞ —Å–µ–∫—É–Ω–¥—É (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç)
        avg_tasks_per_sec = tasks_last_60min / 3600 if tasks_last_60min > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–≤ —á–∞—Å–∞—Ö)
        # –§–æ—Ä–º—É–ª–∞: –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞ 24—á / –∑–∞–¥–∞—á–∏ –∑–∞ 60–º–∏–Ω = –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
        if tasks_last_60min > 0:
            estimated_hours = tasks_last_24h / tasks_last_60min
        else:
            estimated_hours = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_stats = await get_account_stats()
        
        # –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞ 24—á
        banned_24h = await get_banned_accounts_24h()
        
        return {
            # –ê–∫–∫–∞—É–Ω—Ç—ã
            'total_accounts': account_stats.get('total', 0),
            'active_accounts': account_stats.get('active', 0),
            'paused_accounts': account_stats.get('pause', 0),
            'banned_accounts': account_stats.get('ban', 0),
            'banned_24h': banned_24h,
            
            # –ó–∞–¥–∞—á–∏
            'total_tasks_redis': total_tasks,
            'avg_tasks_per_second': avg_tasks_per_sec,
            'estimated_completion_hours': estimated_hours,
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            'updated_at': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(current_time)),
            'stats_age': stats_age if worker_stats_raw else 999999
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

@stats_router.callback_query(F.data == 'statistics')
async def statistics_menu(call: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)"""
    try:
        stats = await get_simplified_statistics()
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='üìä –ü–û –Ø–ó–´–ö–ê–ú', callback_data='stats_by_lang')],
            [IKB(text='üîÑ –û–ë–ù–û–í–ò–¢–¨', callback_data='statistics')],
            [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='main_menu')]
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        est_hours = stats.get('estimated_completion_hours', 0)
        if est_hours > 24:
            time_str = f"{est_hours/24:.1f} –¥–Ω–µ–π"
        elif est_hours > 1:
            time_str = f"{est_hours:.1f} —á–∞—Å–æ–≤"
        else:
            time_str = f"{est_hours*60:.0f} –º–∏–Ω—É—Ç"
        
        text = f"""<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

<b>üë• –ê–ö–ö–ê–£–ù–¢–´:</b>
üì± –í—Å–µ–≥–æ: {stats.get('total_accounts', 0)}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats.get('active_accounts', 0)}
‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {stats.get('paused_accounts', 0)}
üö´ –ó–∞–±–∞–Ω–µ–Ω—ã: {stats.get('banned_accounts', 0)}
üö´ –ó–∞–±–∞–Ω–µ–Ω—ã –∑–∞ 24—á: {stats.get('banned_24h', 0)}

<b>üìã –ó–ê–î–ê–ß–ò:</b>
üì¶ –í—Å–µ–≥–æ –≤ Redis: {stats.get('total_tasks_redis', 0)}
‚ö° –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á/—Å–µ–∫: {stats.get('avg_tasks_per_second', 0):.2f}
‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç. –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_str}

<b>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {stats.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"""
        
        await call.message.edit_text(
            text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@stats_router.callback_query(F.data == 'stats_by_lang')
async def stats_by_language(call: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º"""
    try:
        account_stats = await get_account_stats()
        languages = await get_all_languages()
        
        keyboard = IKM(inline_keyboard=[
            [IKB(text='üîô –ù–ê–ó–ê–î', callback_data='statistics')]
        ])
        
        text_parts = ["<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –Ø–ó–´–ö–ê–ú</b>\n"]
        
        by_language = account_stats.get('by_language', {})
        
        for lang in languages:
            english_lang = find_english_word(lang)
            total = by_language.get(english_lang, 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            accounts = await get_accounts_by_lang(english_lang)
            active = len([a for a in accounts if a['status'] == 'active'])
            pause = len([a for a in accounts if a['status'] == 'pause'])
            ban = len([a for a in accounts if a['status'] == 'ban'])
            
            text_parts.append(
                f"<b>{lang}:</b>\n"
                f"  üì± –í—Å–µ–≥–æ: {total}\n"
                f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
                f"  ‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {pause}\n"
                f"  üö´ –ó–∞–±–∞–Ω–µ–Ω—ã: {ban}\n"
            )
        
        if not languages:
            text_parts.append("<i>–Ø–∑—ã–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>")
        
        text_parts.append("\n –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        
        await call.message.edit_text(
            "\n".join(text_parts),
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —è–∑—ã–∫–∞–º: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–°–¢–û–í –ö–ê–ù–ê–õ–û–í
BOT_START_TIME = time.time()

@main_router.channel_post(F.chat.type == ChatType.CHANNEL)
async def handle_channel_post(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        # –ó–ê–©–ò–¢–ê: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        if message.date:
            message_time = message.date.timestamp()
            current_time = time.time()
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            if (current_time - message_time > 300) or (message_time < BOT_START_TIME):
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –æ—Ç {message.date} –≤ @{message.chat.username}")
                return
        
        channel_username = message.chat.username
        if not channel_username:
            logger.warning("‚õî –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ username")
            return
        
        post_id = message.message_id
        
        logger.info(f"üìù –ù–û–í–´–ô –ø–æ—Å—Ç –≤ @{channel_username}, ID: {post_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 
        results = await task_service.create_view_tasks_for_post(
            channel_username, post_id
        )
        
        if results['total_tasks'] > 0:
            logger.info(f"""
‚úÖ –ó–∞–¥–∞—á–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –ù–û–í–û–ì–û –ø–æ—Å—Ç–∞:
   üì∫ –ö–∞–Ω–∞–ª: @{channel_username}
   üìù –ü–æ—Å—Ç ID: {post_id}
   üì± –ó–∞–¥–∞—á: {results['total_tasks']}
   üåê –Ø–∑—ã–∫–æ–≤: {results['languages']}
   ‚ö° –†–µ–∂–∏–º: —Å–º–µ—à–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∏
            """)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –¥–ª—è @{channel_username} (–≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–Ω–∞–ª –Ω–µ –≤ –ë–î)")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê
@lang_router.callback_query(F.data == 'add_language')
async def add_language_menu(call: CallbackQuery):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    try:
        from config import load_languages
        langs_data = load_languages()
        
        keyboard = IKBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–∏ –ø–∞—Ä–∞–º–∏
        ru_langs = langs_data['ru']
        for i in range(0, len(ru_langs), 2):
            row = []
            for j in range(2):
                if i + j < len(ru_langs):
                    lang = ru_langs[i + j]
                    row.append(IKB(text=lang, callback_data=f'add_lang:{lang}'))
            keyboard.row(*row)
        
        keyboard.row(IKB(text='üîô –ù–ê–ó–ê–î', callback_data='languages'))
        
        await call.message.edit_text(
            "<b>‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
            "‚ö° –í –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ –≤—Å–µ —è–∑—ã–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ —Å—Ä–∞–∑—É",
            parse_mode='HTML',
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@lang_router.callback_query(F.data.startswith('add_lang:'))
async def add_language_process(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    try:
        lang = call.data.split(':', 1)[1]
        
        success = await add_language(lang)
        
        if success:
            await call.answer(f"‚úÖ –Ø–∑—ã–∫ '{lang}' –¥–æ–±–∞–≤–ª–µ–Ω!", show_alert=True)
        else:
            await call.answer(f"‚ö†Ô∏è –Ø–∑—ã–∫ '{lang}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —è–∑—ã–∫–æ–≤
        await languages_menu(call)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
def get_all_routers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return [
        main_router,
        lang_router, 
        account_router,
        settings_router,
        stats_router
    ]