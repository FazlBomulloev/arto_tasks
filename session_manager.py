import asyncio
import hashlib
import logging
import time
from typing import Dict, Optional, List, Tuple
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    AuthKeyInvalidError, SessionPasswordNeededError,
    FloodWaitError, PhoneNumberInvalidError, RPCError
)

from config import API_ID, API_HASH, MAX_SESSIONS_IN_MEMORY, find_lang_code
from database import get_all_accounts, update_account_status
from exceptions import RateLimitError, SessionError, AuthorizationError, InvalidSessionError

logger = logging.getLogger(__name__)

class SessionManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ Telegram —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –≤ RAM
    """
    
    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}  # session_data -> client
        self.session_info: Dict[str, Dict] = {}       # session_data -> info
        self.loading_complete = False
        self.failed_sessions = set()
        self.max_sessions = MAX_SESSIONS_IN_MEMORY
        
    async def preload_all_sessions(self) -> Dict[str, int]:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Å–µ—Å—Å–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ RAM...")
        start_time = time.time()
        
        results = {
            'total': 0,
            'loaded': 0,
            'failed': 0,
            'skipped': 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ë–î
            all_accounts = await get_all_accounts(status='active')
            results['total'] = len(all_accounts)
            
            if not all_accounts:
                logger.warning("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return results
            
            logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ {results['total']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å Telegram API
            batch_size = 100
            batch_delay = 15  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            
            for i in range(0, len(all_accounts), batch_size):
                batch = all_accounts[i:i + batch_size]
                batch_num = (i // batch_size) + 1
                total_batches = (len(all_accounts) + batch_size - 1) // batch_size
                
                logger.info(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)...")
                
                batch_results = await self._load_batch(batch)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results['loaded'] += batch_results['loaded']
                results['failed'] += batch_results['failed'] 
                results['skipped'] += batch_results['skipped']
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i + batch_size < len(all_accounts):
                    logger.info(f"üò¥ –ü–∞—É–∑–∞ {batch_delay} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                    await asyncio.sleep(batch_delay)
            
            self.loading_complete = True
            elapsed = time.time() - start_time
            
            logger.info(f"""
üéâ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥:
   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {results['loaded']}
   ‚ùå –û—à–∏–±–æ–∫: {results['failed']}
   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}
   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['loaded']/results['total']*100:.1f}%
   üíæ –ó–∞–Ω—è—Ç–æ RAM: ~{len(self.clients) * 0.2:.1f} –ú–ë
            """)
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            raise SessionError(f"Session preloading failed: {e}")
    
    async def _load_batch(self, accounts_batch: List[Dict]) -> Dict[str, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞—Ç—á –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        results = {'loaded': 0, 'failed': 0, 'skipped': 0}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        tasks = []
        for account in accounts_batch:
            if len(self.clients) >= self.max_sessions:
                results['skipped'] += 1
                continue
                
            task = asyncio.create_task(
                self._create_and_validate_client(account),
                name=f"load_{account['phone_number']}"
            )
            tasks.append((task, account))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
        if tasks:
            completed_tasks = await asyncio.gather(
                *[task for task, _ in tasks], 
                return_exceptions=True
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for (task, account), result in zip(tasks, completed_tasks):
                phone = account['phone_number']
                session_data = account['session_data']
                
                if isinstance(result, TelegramClient):
                    # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                    self.clients[session_data] = result
                    self.session_info[session_data] = {
                        'phone': phone,
                        'lang': account['lang'],
                        'loaded_at': time.time(),
                        'status': 'active'
                    }
                    results['loaded'] += 1
                    logger.debug(f"‚úÖ {phone}")
                    
                elif isinstance(result, Exception):
                    # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                    self.failed_sessions.add(session_data)
                    results['failed'] += 1
                    logger.warning(f"‚ùå {phone}: {str(result)[:100]}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                    if isinstance(result, (AuthKeyInvalidError, InvalidSessionError)):
                        await update_account_status(phone, 'ban')
                        logger.info(f"üö´ {phone} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–±–∞–Ω–µ–Ω")
        
        return results
    
    async def _create_and_validate_client(self, account: Dict) -> TelegramClient:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π"""
        phone = account['phone_number']
        session_data = account['session_data']
        lang = account.get('lang', 'English')
        
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            client = None
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(
                    StringSession(session_data),
                    API_ID, API_HASH,
                    lang_code=find_lang_code(lang),
                    system_lang_code=find_lang_code(lang),
                    connection_retries=2,
                    request_retries=2,
                    timeout=20,
                    flood_sleep_threshold=30
                )
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                await client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    try:
                        me = await client.get_me()
                        logger.debug(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {phone} (@{me.username or 'no_username'})")
                        return client
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è {phone}: –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - {e}")
                        return client  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
                else:
                    await client.disconnect()
                    raise AuthorizationError(f"Session not authorized for {phone}")
                    
            except FloodWaitError as e:
                if client:
                    await client.disconnect()
                    
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    raise RateLimitError(f"FloodWait {e.seconds}s for {phone}", e.seconds)
                    
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                wait_time = min(e.seconds, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                logger.warning(f"‚è≥ {phone}: FloodWait {wait_time}s, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                await asyncio.sleep(wait_time)
                
            except (AuthKeyInvalidError, SessionPasswordNeededError) as e:
                if client:
                    await client.disconnect()
                raise InvalidSessionError(f"Invalid session for {phone}: {e}")
                
            except Exception as e:
                if client:
                    await client.disconnect()
                    
                if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    raise SessionError(f"Failed to create client for {phone}: {e}")
                    
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await asyncio.sleep(2 ** attempt)
        
        raise SessionError(f"Max retries exceeded for {phone}")
    
    def get_client(self, session_data: str) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø–∞–º—è—Ç–∏"""
        if not self.loading_complete:
            logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return None
            
        if session_data in self.failed_sessions:
            return None
            
        client = self.clients.get(session_data)
        if client and client.is_connected():
            return client
        elif client:
            # –ö–ª–∏–µ–Ω—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
            self.clients.pop(session_data, None)
            self.session_info.pop(session_data, None)
            
        return None
    
    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        connected_count = sum(
            1 for client in self.clients.values() 
            if client.is_connected()
        )
        
        return {
            'total_loaded': len(self.clients),
            'connected': connected_count,
            'disconnected': len(self.clients) - connected_count,
            'failed': len(self.failed_sessions),
            'loading_complete': self.loading_complete,
            'memory_usage_mb': len(self.clients) * 0.2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
    
    async def health_check(self) -> Dict[str, int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if not self.loading_complete:
            return {'status': 'loading'}
            
        dead_sessions = []
        healthy_sessions = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        for session_data, client in list(self.clients.items()):
            try:
                if client.is_connected():
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–∏–Ω–≥—É–µ–º Telegram
                    await asyncio.wait_for(client.get_me(), timeout=5)
                    healthy_sessions += 1
                else:
                    dead_sessions.append(session_data)
            except Exception as e:
                logger.warning(f"Dead session detected: {self.session_info.get(session_data, {}).get('phone', 'unknown')}")
                dead_sessions.append(session_data)
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–µ—Å—Å–∏–∏
        for session_data in dead_sessions:
            self.clients.pop(session_data, None)
            self.session_info.pop(session_data, None)
            self.failed_sessions.add(session_data)
        
        return {
            'healthy': healthy_sessions,
            'removed_dead': len(dead_sessions),
            'total_active': len(self.clients)
        }
    
    async def add_new_session(self, account: Dict) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ø—É–ª (–¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)"""
        if len(self.clients) >= self.max_sessions:
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π {self.max_sessions}")
            return False
            
        try:
            client = await self._create_and_validate_client(account)
            session_data = account['session_data']
            
            self.clients[session_data] = client
            self.session_info[session_data] = {
                'phone': account['phone_number'],
                'lang': account['lang'],
                'loaded_at': time.time(),
                'status': 'active'
            }
            
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {account['phone_number']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é {account['phone_number']}: {e}")
            return False
    
    async def remove_session(self, session_data: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –ø—É–ª–∞"""
        if session_data in self.clients:
            client = self.clients[session_data]
            try:
                if client.is_connected():
                    await client.disconnect()
            except:
                pass
            
            phone = self.session_info.get(session_data, {}).get('phone', 'unknown')
            self.clients.pop(session_data, None)
            self.session_info.pop(session_data, None)
            self.failed_sessions.discard(session_data)
            
            logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {phone}")
    
    async def remove_session_by_phone(self, phone: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        session_to_remove = None
        
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        for session_data, info in self.session_info.items():
            if info.get('phone') == phone:
                session_to_remove = session_data
                break
        
        if session_to_remove:
            await self.remove_session(session_to_remove)
            logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {phone}")
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –¥–ª—è {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É–ª–µ")
    
    async def get_session_by_phone(self, phone: str) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        for session_data, info in self.session_info.items():
            if info.get('phone') == phone:
                return self.get_client(session_data)
        return None
    
    async def reload_single_session(self, account: Dict) -> bool:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ –±–∞–Ω–∞)"""
        phone = account['phone_number']
        session_data = account['session_data']
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            await self.remove_session_by_phone(phone)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            success = await self.add_new_session(account)
            
            if success:
                logger.info(f"üîÑ –°–µ—Å—Å–∏—è {phone} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é {phone}")
                
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ {phone}: {e}")
            return False
    
    async def get_sessions_by_language(self, lang: str) -> List[TelegramClient]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —è–∑—ã–∫—É"""
        clients = []
        
        for session_data, info in self.session_info.items():
            if info.get('lang') == lang:
                client = self.get_client(session_data)
                if client:
                    clients.append(client)
        
        return clients
    
    async def get_random_session(self, lang: Optional[str] = None) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —è–∑—ã–∫—É)"""
        available_sessions = []
        
        for session_data, info in self.session_info.items():
            if lang and info.get('lang') != lang:
                continue
                
            client = self.get_client(session_data)
            if client:
                available_sessions.append(client)
        
        if available_sessions:
            import random
            return random.choice(available_sessions)
        
        return None
    
    async def get_session_info_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
        summary = {
            'total_sessions': len(self.clients),
            'loading_complete': self.loading_complete,
            'failed_sessions': len(self.failed_sessions),
            'by_language': {},
            'by_status': {},
            'oldest_session': None,
            'newest_session': None
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
        for session_data, info in self.session_info.items():
            lang = info.get('lang', 'unknown')
            summary['by_language'][lang] = summary['by_language'].get(lang, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            client = self.clients.get(session_data)
            status = 'connected' if client and client.is_connected() else 'disconnected'
            summary['by_status'][status] = summary['by_status'].get(status, 0) + 1
            
            # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏–∏
            loaded_at = info.get('loaded_at', 0)
            if summary['oldest_session'] is None or loaded_at < summary['oldest_session']:
                summary['oldest_session'] = loaded_at
            if summary['newest_session'] is None or loaded_at > summary['newest_session']:
                summary['newest_session'] = loaded_at
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamps –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if summary['oldest_session']:
            summary['oldest_session'] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(summary['oldest_session']))
        if summary['newest_session']:
            summary['newest_session'] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(summary['newest_session']))
        
        return summary
    
    async def cleanup_failed_sessions(self):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        cleaned_count = 0
        
        for session_data in list(self.failed_sessions):
            # –£–¥–∞–ª—è–µ–º –∏–∑ failed_sessions –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤ –ø—É–ª–µ
            if session_data not in self.clients:
                self.failed_sessions.discard(session_data)
                cleaned_count += 1
        
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö")
        return cleaned_count
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ —Å–µ—Å—Å–∏–∏...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        disconnect_tasks = []
        for session_data, client in list(self.clients.items()):
            if client.is_connected():
                task = asyncio.create_task(self._safe_disconnect(client, session_data))
                disconnect_tasks.append(task)
        
        if disconnect_tasks:
            await asyncio.gather(*disconnect_tasks, return_exceptions=True)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.clients.clear()
        self.session_info.clear()
        self.failed_sessions.clear()
        self.loading_complete = False
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    async def _safe_disconnect(self, client: TelegramClient, session_data: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            await asyncio.wait_for(client.disconnect(), timeout=10)
        except Exception as e:
            phone = self.session_info.get(session_data, {}).get('phone', 'unknown')
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ {phone}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
global_session_manager = SessionManager()