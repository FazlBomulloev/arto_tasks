import asyncio
import logging
import zipfile
import shutil
import time
import os
import random
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import AuthKeyInvalidError, SessionPasswordNeededError

from opentele.td import TDesktop
from opentele.api import UseCurrentSession

from config import API_ID, API_HASH, DOWNLOADS_DIR, ACCOUNTS_DIR, find_english_word
from database import (
    add_account, get_account_by_phone, get_accounts_by_lang, 
    delete_accounts_by_status, get_account_stats, get_all_accounts
)
from session_manager import global_session_manager
from exceptions import AccountValidationError, FileProcessingError

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏
try:
    from task_service import TaskItem, TaskType
except ImportError:
    # –ï—Å–ª–∏ task_service –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    from dataclasses import dataclass
    from enum import Enum
    
    class TaskType(Enum):
        SUBSCRIBE = "subscribe"
    
    @dataclass
    class TaskItem:
        account_session: str
        phone: str
        channel: str  
        lang: str
        task_type: TaskType
        execute_at: Optional[float] = None
        retry_count: int = 0

logger = logging.getLogger(__name__)

class AccountService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.validation_retries = 5
        self.validation_delay = 3.0
    
    async def add_accounts_from_zip(self, zip_path: Path, target_lang: str, 
                                  progress_callback=None) -> Dict[str, int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ ZIP —Å –ê–î–ê–ü–¢–ò–í–ù–û–ô –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        results = {
            'total': 0,
            'validated': 0,
            'added': 0,
            'skipped_exists': 0,
            'failed_validation': 0,
            'failed_db': 0
        }
        
        temp_extract_path = None
        
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            if progress_callback:
                await progress_callback("üì¶ –ò–∑–≤–ª–µ–∫–∞—é –∞—Ä—Ö–∏–≤...")
                
            temp_extract_path = DOWNLOADS_DIR / f"temp_extract_{int(time.time())}"
            accounts_data = await self._extract_zip_archive(zip_path, temp_extract_path)
            results['total'] = len(accounts_data)
            
            if not accounts_data:
                raise FileProcessingError("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ {results['total']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if progress_callback:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")
                
            existing_phones = set()
            for account_data in accounts_data:
                existing = await get_account_by_phone(account_data['phone'])
                if existing:
                    results['skipped_exists'] += 1
                    existing_phones.add(account_data['phone'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            new_accounts = [
                acc for acc in accounts_data 
                if acc['phone'] not in existing_phones
            ]
            
            logger.info(f"üìù –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(new_accounts)} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            if not new_accounts:
                return results
            
            # 3. –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            batch_results = await self._validate_and_add_batch_adaptive(new_accounts, target_lang, progress_callback)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for key in ['validated', 'added', 'failed_validation', 'failed_db']:
                results[key] += batch_results[key]
            
            # 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            success_rate = (results['added'] / results['total']) * 100 if results['total'] > 0 else 0
            
            logger.info(f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
   üì± –í—Å–µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ: {results['total']}
   ‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {results['validated']}
   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {results['added']}
   ‚è≠Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {results['skipped_exists']}
   ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {results['failed_validation']}
   üö´ –û—à–∏–±–∫–∏ –ë–î: {results['failed_db']}
   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
            """)
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            raise AccountValidationError(f"Failed to add accounts: {e}")
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_extract_path and temp_extract_path.exists():
                try:
                    shutil.rmtree(temp_extract_path)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    async def _extract_zip_archive(self, zip_path: Path, extract_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        accounts_data = []
        
        try:
            extract_path.mkdir(parents=True, exist_ok=True)
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_path)
            
            # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ tdata)
            for item in extract_path.iterdir():
                if item.is_dir():
                    tdata_path = item / 'tdata'
                    if tdata_path.exists() and tdata_path.is_dir():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ tdata –µ—Å—Ç—å —Ñ–∞–π–ª—ã
                        if any(tdata_path.glob('*')):
                            accounts_data.append({
                                'phone': item.name,
                                'tdata_path': tdata_path,
                                'account_path': item
                            })
            
            logger.info(f"üìÇ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(accounts_data)} –ø–∞–ø–æ–∫ —Å tdata")
            return accounts_data
            
        except zipfile.BadZipFile:
            raise FileProcessingError("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º")
        except Exception as e:
            raise FileProcessingError(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
    
    async def _validate_and_add_batch_adaptive(self, accounts_batch: List[Dict], 
                                             target_lang: str, progress_callback=None) -> Dict[str, int]:
        """
        –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        results = {
            'validated': 0,
            'added': 0,
            'failed_validation': 0,
            'failed_db': 0,
            'added_accounts': []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        }
        
        total_accounts = len(accounts_batch)
        
        # ========== –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–î –ö–û–õ–ò–ß–ï–°–¢–í–û ==========
        
        processing_params = self._calculate_adaptive_params(total_accounts)
        
        logger.info(f"""
üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
   ‚è±Ô∏è –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {processing_params['estimated_hours']:.1f} —á–∞—Å–æ–≤
   ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {processing_params['parallel_batch_size']}
   üîÑ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {processing_params['account_delay']:.1f} —Å–µ–∫
   ‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {processing_params['batch_pause']} —Å–µ–∫
   üéöÔ∏è –†–µ–∂–∏–º: {processing_params['mode']}
        """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
        if progress_callback:
            await progress_callback(
                f"üéØ –†–µ–∂–∏–º: {processing_params['mode']} | "
                f"–í—Ä–µ–º—è: ~{processing_params['estimated_hours']:.1f}—á | "
                f"–ü–æ—Ç–æ–∫–æ–≤: {processing_params['parallel_batch_size']}"
            )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if processing_params['mode'] == 'instant':
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            batch_results = await self._process_instant_mode(accounts_batch, target_lang, processing_params, progress_callback)
        
        elif processing_params['mode'] == 'fast_parallel':
            # –ë—ã—Å—Ç—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            batch_results = await self._process_fast_parallel_mode(accounts_batch, target_lang, processing_params, progress_callback)
        
        else:  # 'distributed'
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            batch_results = await self._process_distributed_mode(accounts_batch, target_lang, processing_params, progress_callback)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for key in ['validated', 'added', 'failed_validation', 'failed_db']:
            results[key] = batch_results.get(key, 0)
        
        return results

    def _calculate_adaptive_params(self, total_accounts: int) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        
        if total_accounts <= 50:
            # ========== –ú–ê–õ–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û (1-50): –ú–ì–ù–û–í–ï–ù–ù–û ==========
            return {
                'mode': 'instant',
                'estimated_hours': 0.1,  # 6 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
                'parallel_batch_size': min(total_accounts, 10),
                'account_delay': 1.0,    # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                'batch_pause': 5,        # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                'retry_count': 2,        # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                'timeout': 8             # –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
            }
        
        elif total_accounts <= 500:
            # ========== –°–†–ï–î–ù–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û (51-500): –ë–´–°–¢–†–û ==========
            estimated_time = 0.02 * total_accounts  # ~2 –º–∏–Ω—É—Ç—ã –Ω–∞ 100 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            
            return {
                'mode': 'fast_parallel', 
                'estimated_hours': estimated_time / 60,
                'parallel_batch_size': min(total_accounts // 10, 25),  # 10-25 –ø–æ—Ç–æ–∫–æ–≤
                'account_delay': 2.0,    # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                'batch_pause': 15,       # 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                'retry_count': 3,        # –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
                'timeout': 12            # –°—Ä–µ–¥–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç—ã
            }
        
        elif total_accounts <= 2000:
            # ========== –ë–û–õ–¨–®–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û (501-2000): –£–ú–ï–†–ï–ù–ù–û ==========
            estimated_time = 0.05 * total_accounts  # ~5 –º–∏–Ω—É—Ç –Ω–∞ 100 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            
            return {
                'mode': 'distributed',
                'estimated_hours': estimated_time / 60,
                'parallel_batch_size': min(total_accounts // 20, 40),  # 20-40 –ø–æ—Ç–æ–∫–æ–≤
                'account_delay': 3.0,    # 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏  
                'batch_pause': 30,       # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                'retry_count': 3,        # –•–æ—Ä–æ—à–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
                'timeout': 15            # –ù–∞–¥–µ–∂–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
            }
        
        else:
            # ========== –û–ß–ï–ù–¨ –ë–û–õ–¨–®–û–ï (2000+): –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û ==========
            # –õ–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ~1 —á–∞—Å –Ω–∞ 1000 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            estimated_time = total_accounts * 1.0  # 1 —á–∞—Å –Ω–∞ 1000 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            
            return {
                'mode': 'distributed',
                'estimated_hours': estimated_time / 1000,
                'parallel_batch_size': min(total_accounts // 50, 50),  # 20-50 –ø–æ—Ç–æ–∫–æ–≤
                'account_delay': 5.0,    # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                'batch_pause': 60,       # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                'retry_count': 5,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
                'timeout': 20            # –î–ª–∏–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
            }

    async def _process_instant_mode(self, accounts_batch: List[Dict], target_lang: str, 
                                  params: Dict, progress_callback=None) -> Dict[str, int]:
        """
        –ú–ì–ù–û–í–ï–ù–ù–´–ô —Ä–µ–∂–∏–º –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (1-50)
        –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        """
        results = {
            'validated': 0, 
            'added': 0, 
            'failed_validation': 0, 
            'failed_db': 0,
            'added_accounts': []
        }
        
        logger.info(f"‚ö° –ú–ì–ù–û–í–ï–ù–ù–´–ô —Ä–µ–∂–∏–º: {len(accounts_batch)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        if progress_callback:
            await progress_callback("‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        validation_tasks = []
        
        for idx, account_data in enumerate(accounts_batch):
            # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API
            start_delay = idx * params['account_delay']
            
            task = asyncio.create_task(
                self._validate_and_add_single_optimized(
                    account_data, target_lang, start_delay, params
                )
            )
            validation_tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        batch_results = await asyncio.gather(*validation_tasks, return_exceptions=True)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for idx, result in enumerate(batch_results):
            phone = accounts_batch[idx]['phone']
            
            if isinstance(result, dict) and result.get('success'):
                results['validated'] += 1
                results['added'] += 1
                if 'account_data' in result:
                    results['added_accounts'].append(result['account_data'])
            elif isinstance(result, Exception):
                results['failed_validation'] += 1
                logger.warning(f"‚ùå {phone}: {str(result)[:50]}")
            else:
                results['failed_db'] += 1
        
        # –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if results['added_accounts']:
            if progress_callback:
                await progress_callback("üì∫ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            subscription_stats = await self._create_subscription_tasks_for_new_accounts(
                results['added_accounts'], target_lang
            )
            
            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–æ {subscription_stats['tasks_created']} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
        
        return results

    async def _process_fast_parallel_mode(self, accounts_batch: List[Dict], target_lang: str, 
                                        params: Dict, progress_callback=None) -> Dict[str, int]:
        """
        –ë–´–°–¢–†–´–ô –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô —Ä–µ–∂–∏–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (51-500)
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é
        """
        results = {
            'validated': 0, 
            'added': 0, 
            'failed_validation': 0, 
            'failed_db': 0,
            'added_accounts': []
        }
        
        batch_size = params['parallel_batch_size']
        total_accounts = len(accounts_batch)
        
        logger.info(f"üöÄ –ë–´–°–¢–†–´–ô –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô —Ä–µ–∂–∏–º: {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –±–∞—Ç—á–∏ –ø–æ {batch_size}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏
        for i in range(0, total_accounts, batch_size):
            batch = accounts_batch[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = (total_accounts + batch_size - 1) // batch_size
            
            logger.info(f"üì¶ –ë–∞—Ç—á {batch_num}/{total_batches}: {len(batch)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            if progress_callback:
                progress = (i / total_accounts) * 100
                await progress_callback(f"üöÄ –ë–∞—Ç—á {batch_num}/{total_batches} ({progress:.0f}%)")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            batch_results = await self._validate_parallel_batch_optimized(batch, target_lang, params)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for key in ['validated', 'added', 'failed_validation', 'failed_db']:
                results[key] += batch_results[key]
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            results['added_accounts'].extend(batch_results.get('added_accounts', []))
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i + batch_size < total_accounts:
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {params['batch_pause']} —Å–µ–∫ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                await asyncio.sleep(params['batch_pause'])
        
        # –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if results['added_accounts']:
            if progress_callback:
                await progress_callback("üì∫ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            subscription_stats = await self._create_subscription_tasks_for_new_accounts(
                results['added_accounts'], target_lang
            )
            
            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–æ {subscription_stats['tasks_created']} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
        
        return results

    async def _process_distributed_mode(self, accounts_batch: List[Dict], target_lang: str, 
                                      params: Dict, progress_callback=None) -> Dict[str, int]:
        """
        –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (500+)
        –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram API
        """
        results = {
            'validated': 0, 
            'added': 0, 
            'failed_validation': 0, 
            'failed_db': 0,
            'added_accounts': []
        }
        
        batch_size = params['parallel_batch_size']
        total_accounts = len(accounts_batch)
        
        logger.info(f"üèóÔ∏è –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô —Ä–µ–∂–∏–º: {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –±–∞—Ç—á–∏ –ø–æ {batch_size}")
        logger.info(f"‚è±Ô∏è –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {params['estimated_hours']:.1f} —á–∞—Å–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        current_delay = params['account_delay']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏
        for i in range(0, total_accounts, batch_size):
            batch = accounts_batch[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = (total_accounts + batch_size - 1) // batch_size
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = (i / total_accounts) * 100
            logger.info(f"üì¶ –ë–∞—Ç—á {batch_num}/{total_batches}: {len(batch)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({progress:.1f}%)")
            
            if progress_callback:
                await progress_callback(f"üèóÔ∏è –ë–∞—Ç—á {batch_num}/{total_batches} ({progress:.0f}%)")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∞—Ç—á —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            current_params = params.copy()
            current_params['account_delay'] = current_delay
            
            batch_results = await self._validate_parallel_batch_optimized(batch, target_lang, current_params)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for key in ['validated', 'added', 'failed_validation', 'failed_db']:
                results[key] += batch_results[key]
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            results['added_accounts'].extend(batch_results.get('added_accounts', []))
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
            if total_accounts > 1000 and batch_num % 10 == 0:
                current_delay *= 1.1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 10% –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                logger.info(f"üêå –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ {current_delay:.1f}—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if i + batch_size < total_accounts:
                pause_time = params['batch_pause']
                # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã
                if total_accounts > 5000:
                    pause_time *= 1.5
                
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {pause_time:.0f} —Å–µ–∫ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                await asyncio.sleep(pause_time)
        
        # –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if results['added_accounts']:
            if progress_callback:
                await progress_callback("üì∫ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            subscription_stats = await self._create_subscription_tasks_for_new_accounts(
                results['added_accounts'], target_lang
            )
            
            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–æ {subscription_stats['tasks_created']} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
        
        return results

    async def _validate_parallel_batch_optimized(self, batch: List[Dict], target_lang: str, params: Dict) -> Dict[str, int]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        results = {
            'validated': 0, 
            'added': 0, 
            'failed_validation': 0, 
            'failed_db': 0,
            'added_accounts': []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_tasks = []
        
        for idx, account_data in enumerate(batch):
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            start_delay = idx * params['account_delay']
            
            task = asyncio.create_task(
                self._validate_and_add_single_optimized(account_data, target_lang, start_delay, params)
            )
            validation_tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
        batch_results = await asyncio.gather(*validation_tasks, return_exceptions=True)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for idx, result in enumerate(batch_results):
            phone = batch[idx]['phone']
            
            if isinstance(result, dict) and result.get('success'):
                results['validated'] += 1
                results['added'] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if 'account_data' in result:
                    results['added_accounts'].append(result['account_data'])
                    
                logger.debug(f"‚úÖ {phone}")
            elif isinstance(result, Exception):
                results['failed_validation'] += 1
                logger.debug(f"‚ùå {phone}: {str(result)[:50]}")
            else:
                results['failed_db'] += 1
                logger.debug(f"üö´ {phone}: DB error")
        
        return results

    async def _validate_and_add_single_optimized(self, account_data: Dict, target_lang: str, 
                                               delay: float, params: Dict) -> Dict:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if delay > 0:
            await asyncio.sleep(delay)
        
        phone = account_data['phone']
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥ —Ä–µ–∂–∏–º
            session_data = await self._validate_single_account_adaptive(account_data, params)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            success = await add_account(
                phone=phone,
                session_data=session_data,
                lang=find_english_word(target_lang)
            )
            
            if success:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                account_dict = {
                    'phone_number': phone,
                    'session_data': session_data,
                    'lang': find_english_word(target_lang)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω
                if global_session_manager.loading_complete:
                    await global_session_manager.add_new_session(account_dict)
                
                return {
                    'success': True, 
                    'phone': phone, 
                    'account_data': account_dict  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                }
            else:
                return {'success': False, 'phone': phone, 'error': 'DB_ERROR'}
                
        except Exception as e:
            return {'success': False, 'phone': phone, 'error': str(e)}

    async def _validate_single_account_adaptive(self, account_data: Dict, params: Dict) -> str:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        """
        phone = account_data['phone']
        tdata_path = account_data['tdata_path']
        
        retry_count = params['retry_count']
        timeout = params['timeout']
        
        for attempt in range(retry_count):
            temp_session_path = None
            client = None
            
            try:
                temp_session_path = tdata_path.parent / f"temp_{int(time.time())}.session"
                
                tdesk = TDesktop(tdata_path)
                if not tdesk.accounts:
                    raise AccountValidationError(f"No valid accounts in tdata for {phone}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Telethon
                client = await tdesk.ToTelethon(
                    session=str(temp_session_path),
                    flag=UseCurrentSession
                )
                await client.disconnect()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                client = TelegramClient(
                    session=str(temp_session_path),
                    api_id=API_ID,
                    api_hash=API_HASH,
                    connection_retries=1 if params['mode'] == 'instant' else 2,
                    timeout=timeout
                )
                
                await client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await client.is_user_authorized():
                    raise AccountValidationError(f"Session not authorized for {phone}")
                
                # –ü–æ–ª—É—á–∞–µ–º session_data
                session_data = StringSession.save(client.session)
                await client.disconnect()
                
                logger.debug(f"‚úÖ {phone} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ {params['mode']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                return session_data
                
            except Exception as e:
                if client:
                    try:
                        await client.disconnect()
                    except:
                        pass
                
                if temp_session_path and temp_session_path.exists():
                    try:
                        temp_session_path.unlink()
                    except:
                        pass
                
                if attempt == retry_count - 1:
                    raise AccountValidationError(f"Adaptive validation failed for {phone}: {e}")
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ retry
                retry_delay = 1 if params['mode'] == 'instant' else (2 ** attempt)
                await asyncio.sleep(retry_delay)
                    
            finally:
                if temp_session_path and temp_session_path.exists():
                    try:
                        temp_session_path.unlink()
                    except:
                        pass
        
        raise AccountValidationError(f"Max adaptive validation retries exceeded for {phone}")
    
    async def _create_subscription_tasks_for_new_accounts(self, new_accounts: List[Dict], target_lang: str) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã —è–∑—ã–∫–∞
        """
        subscription_stats = {
            'channels_found': 0,
            'tasks_created': 0,
            'accounts_processed': 0
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
            from database import get_channels_by_lang
            channels = await get_channels_by_lang(target_lang)
            
            if not channels:
                logger.info(f"üì∫ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {target_lang}, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
                return subscription_stats
            
            subscription_stats['channels_found'] = len(channels)
            logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {target_lang}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            for channel_name in channels:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    results = await self._create_subscription_tasks_for_accounts(
                        channel_name, new_accounts, target_lang
                    )
                    
                    subscription_stats['tasks_created'] += results.get('total_tasks', 0)
                    
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name}: —Å–æ–∑–¥–∞–Ω–æ {results.get('total_tasks', 0)} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_name}: {e}")
            
            subscription_stats['accounts_processed'] = len(new_accounts)
            
            logger.info(f"""
üìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:
   üì∫ –ö–∞–Ω–∞–ª–æ–≤: {subscription_stats['channels_found']}
   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {subscription_stats['accounts_processed']}
   üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {subscription_stats['tasks_created']}
            """)
            
            return subscription_stats
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return subscription_stats

    async def _create_subscription_tasks_for_accounts(self, channel_name: str, accounts: List[Dict], target_lang: str) -> Dict[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
        """
        results = {
            'total_tasks': 0,
            'accounts_processed': 0
        }
        
        try:
            if not accounts:
                return results
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            from config import find_english_word, read_setting
            
            english_lang = find_english_word(target_lang)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–µ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
            params = {
                'base_delay': read_setting('lag.txt', 30.0) * 60,      # –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                'range_val': read_setting('range.txt', 5.0) * 60,      # –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã  
                'accounts_delay': read_setting('accounts_delay.txt', 10.0) * 60,
                'timeout_count': int(read_setting('timeout_count.txt', 4.0)),
                'timeout_duration': read_setting('timeout_duration.txt', 20.0) * 60
            }
            
            logger.info(f"üìÖ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ @{channel_name}")
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
            random.shuffle(accounts)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            subscription_tasks = []
            current_time = time.time()
            
            for account_idx, account in enumerate(accounts):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                delay_seconds = await self._calculate_subscription_delay_for_account(
                    account_idx, params
                )
                
                execute_at = current_time + delay_seconds
                
                task = TaskItem(
                    account_session=account['session_data'],
                    phone=account['phone_number'],
                    channel=channel_name,
                    lang=english_lang,
                    task_type=TaskType.SUBSCRIBE,
                    execute_at=execute_at
                )
                
                subscription_tasks.append(task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            await self._schedule_subscription_tasks_direct(subscription_tasks)
            
            results['total_tasks'] = len(subscription_tasks)
            results['accounts_processed'] = len(accounts)
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return results

    async def _calculate_subscription_delay_for_account(self, account_index: int, params: Dict[str, float]) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        base_delay = params['base_delay']
        range_val = params['range_val']
        accounts_delay = params['accounts_delay']
        timeout_count = params['timeout_count']
        timeout_duration = params['timeout_duration']
        
        # 1. –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        account_delay = account_index * accounts_delay
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å
        random_variation = random.uniform(-range_val, range_val)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö timeout_count –ø–æ–¥–ø–∏—Å–æ–∫
        timeout_cycles = account_index // timeout_count
        timeout_delay = timeout_cycles * timeout_duration
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        total_delay = account_delay + random_variation + timeout_delay
        
        # 5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –Ω–µ –º–µ–Ω–µ–µ –±–∞–∑–æ–≤–æ–π
        total_delay = max(total_delay, base_delay)
        
        return total_delay

    async def _schedule_subscription_tasks_direct(self, tasks):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ Redis
        """
        try:
            from redis import Redis
            from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
            import json
            
            redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD, 
                decode_responses=True
            )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks.sort(key=lambda x: x.execute_at)
            
            for task in tasks:
                task_data = {
                    'account_session': task.account_session,
                    'phone': task.phone,
                    'channel': task.channel,
                    'lang': task.lang,
                    'task_type': task.task_type.value,
                    'execute_at': task.execute_at,
                    'retry_count': task.retry_count,
                    'created_at': time.time()
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥–ø–∏—Å–æ–∫
                redis_client.lpush("subscription_tasks", json.dumps(task_data))
            
            # TTL –Ω–∞ 48 —á–∞—Å–æ–≤
            redis_client.expire("subscription_tasks", 48 * 3600)
            
            logger.info(f"üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    # ========== –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==========
    
    async def add_accounts_from_zip_with_validation(self, zip_path: Path, target_lang: str, 
                                                  progress_callback=None) -> Dict[str, int]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ ZIP —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (—Ç–µ–ø–µ—Ä—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π)
        """
        return await self.add_accounts_from_zip(zip_path, target_lang, progress_callback)
    
    async def add_accounts_from_zip_fast(self, zip_path: Path, target_lang: str, 
                                       progress_callback=None) -> Dict[str, int]:
        """
        –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        results = {
            'total': 0,
            'added': 0,
            'skipped_exists': 0,
            'failed_db': 0
        }
        
        temp_extract_path = None
        
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            if progress_callback:
                await progress_callback("üì¶ –ò–∑–≤–ª–µ–∫–∞—é –∞—Ä—Ö–∏–≤...")
                
            temp_extract_path = DOWNLOADS_DIR / f"temp_extract_{int(time.time())}"
            accounts_data = await self._extract_zip_archive(zip_path, temp_extract_path)
            results['total'] = len(accounts_data)
            
            if not accounts_data:
                raise FileProcessingError("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ {results['total']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if progress_callback:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")
                
            existing_phones = set()
            for account_data in accounts_data:
                existing = await get_account_by_phone(account_data['phone'])
                if existing:
                    results['skipped_exists'] += 1
                    existing_phones.add(account_data['phone'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            new_accounts = [
                acc for acc in accounts_data 
                if acc['phone'] not in existing_phones
            ]
            
            logger.info(f"üìù –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: {len(new_accounts)} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            if not new_accounts:
                return results
            
            # 3. –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ë–ï–ó –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if progress_callback:
                await progress_callback(f"‚ö° –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è—é {len(new_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            added_accounts = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            
            for idx, account_data in enumerate(new_accounts):
                try:
                    phone = account_data['phone']
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º tdata –≤ session_data –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
                    session_data = await self._convert_tdata_to_session_fast(account_data)
                    
                    if session_data:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'none' (–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω)
                        success = await add_account(
                            phone=phone,
                            session_data=session_data,
                            lang=find_english_word(target_lang)
                        )
                        
                        if success:
                            results['added'] += 1
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            added_accounts.append({
                                'phone_number': phone,
                                'session_data': session_data,
                                'lang': find_english_word(target_lang)
                            })
                            
                            if (idx + 1) % 100 == 0:
                                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {idx + 1}/{len(new_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                        else:
                            results['failed_db'] += 1
                    else:
                        results['failed_db'] += 1
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {phone}: {e}")
                    results['failed_db'] += 1
            
            # 4. –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–ò –ü–û–î–ü–ò–°–ö–ò –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if added_accounts:
                if progress_callback:
                    await progress_callback("üì∫ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                
                subscription_stats = await self._create_subscription_tasks_for_new_accounts(
                    added_accounts, target_lang
                )
                
                logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–æ {subscription_stats['tasks_created']} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            logger.info(f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
   üì± –í—Å–µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ: {results['total']}
   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {results['added']}
   ‚è≠Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {results['skipped_exists']}
   üö´ –û—à–∏–±–∫–∏ –ë–î: {results['failed_db']}
   ‚ö° –†–µ–∂–∏–º: –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            """)
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            raise AccountValidationError(f"Failed to add accounts fast: {e}")
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_extract_path and temp_extract_path.exists():
                try:
                    shutil.rmtree(temp_extract_path)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    async def _convert_tdata_to_session_fast(self, account_data: Dict) -> Optional[str]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tdata –≤ session_data –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        """
        phone = account_data['phone']
        tdata_path = account_data['tdata_path']
        temp_session_path = None
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º tdata –≤ —Å–µ—Å—Å–∏—é –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            temp_session_path = tdata_path.parent / f"temp_{int(time.time())}.session"
            
            tdesk = TDesktop(tdata_path)
            if not tdesk.accounts:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Telethon –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            client = await tdesk.ToTelethon(
                session=str(temp_session_path),
                flag=UseCurrentSession
            )
            await client.disconnect()
            
            # –ü–æ–ª—É—á–∞–µ–º session_data –∏–∑ —Ñ–∞–π–ª–∞
            from telethon.sessions import SQLiteSession
            temp_session = SQLiteSession(str(temp_session_path))
            
            # –°–æ–∑–¥–∞–µ–º StringSession –∏–∑ SQLite —Å–µ—Å—Å–∏–∏
            from telethon import TelegramClient
            from telethon.sessions import StringSession
            
            temp_client = TelegramClient(
                temp_session, API_ID, API_HASH
            )
            
            # –ü–æ–ª—É—á–∞–µ–º session_data
            session_data = StringSession.save(temp_client.session)
            
            logger.debug(f"‚ö° {phone}: –±—ã—Å—Ç—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ session_data")
            return session_data
            
        except Exception as e:
            logger.warning(f"‚ùå {phone}: –æ—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - {e}")
            return None
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_session_path and temp_session_path.exists():
                try:
                    temp_session_path.unlink()
                except:
                    pass
    
    async def delete_accounts_by_status(self, status: str, limit: int = None) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        
        Args:
            status: —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ('ban', 'pause', etc.)
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
            if status == 'all':
                accounts_to_delete = await get_all_accounts()
            else:
                accounts_to_delete = []
                all_accounts = await get_all_accounts()
                for account in all_accounts:
                    if account['status'] == status:
                        accounts_to_delete.append(account)
            
            if limit:
                accounts_to_delete = accounts_to_delete[:limit]
            
            if not accounts_to_delete:
                logger.info(f"‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return 0
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø—É–ª–∞ —Å–µ—Å—Å–∏–π
            for account in accounts_to_delete:
                await global_session_manager.remove_session(account['session_data'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            from database import delete_accounts_by_status as db_delete_accounts_by_status
            deleted_count = await db_delete_accounts_by_status(status, limit)
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return 0
    
    async def export_active_accounts(self, target_lang: Optional[str] = None) -> Optional[Path]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ ZIP –∞—Ä—Ö–∏–≤ —Å session_data (–Ω–µ —Ñ–∞–π–ª–∞–º–∏)
        
        Args:
            target_lang: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Path –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if target_lang:
                accounts = await get_accounts_by_lang(find_english_word(target_lang), 'active')
                archive_name = f"active_accounts_{target_lang}_{int(time.time())}.zip"
            else:
                accounts = await get_all_accounts('active')
                archive_name = f"active_accounts_all_{int(time.time())}.zip"
            
            if not accounts:
                logger.warning("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å session_data
            archive_path = DOWNLOADS_DIR / archive_name
            temp_dir = DOWNLOADS_DIR / f"temp_export_{int(time.time())}"
            
            try:
                temp_dir.mkdir(exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ session_data
                exported_count = 0
                for account in accounts:
                    phone = account['phone_number']
                    session_data = account['session_data']
                    lang = account.get('lang', 'none')
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_dir = temp_dir / phone
                    account_dir.mkdir(exist_ok=True)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å session data
                    session_file = account_dir / f"{phone}.session"
                    
                    # –°–æ–∑–¥–∞–µ–º telethon session –∏–∑ StringSession
                    try:
                        from telethon.sessions import StringSession
                        from telethon import TelegramClient
                        
                        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                        temp_client = TelegramClient(
                            str(session_file),
                            API_ID, API_HASH,
                            session=StringSession(session_data)
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º session –≤ —Ñ–∞–π–ª
                        await temp_client.connect()
                        await temp_client.disconnect()
                        
                        # –°–æ–∑–¥–∞–µ–º info —Ñ–∞–π–ª
                        info_file = account_dir / "info.txt"
                        info_content = f"""Phone: {phone}
Language: {lang}
Status: {account.get('status', 'active')}
Exported: {time.strftime('%Y-%m-%d %H:%M:%S')}
Session: {session_data[:50]}...
"""
                        info_file.write_text(info_content, encoding='utf-8')
                        
                        exported_count += 1
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {phone}: {e}")
                        continue
                
                if exported_count == 0:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
                import zipfile
                with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for root, dirs, files in os.walk(temp_dir):
                        for file in files:
                            file_path = Path(root) / file
                            arc_path = file_path.relative_to(temp_dir)
                            zipf.write(file_path, arc_path)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                shutil.rmtree(temp_dir)
                
                logger.info(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ {archive_name}")
                return archive_path
                
            except Exception as e:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if temp_dir.exists():
                    shutil.rmtree(temp_dir, ignore_errors=True)
                if archive_path.exists():
                    archive_path.unlink()
                raise e
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
account_service = AccountService()
