import asyncio
import logging
import zipfile
import shutil
import time
import os
import random
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import AuthKeyInvalidError, SessionPasswordNeededError

from opentele.td import TDesktop
from opentele.api import UseCurrentSession

from config import API_ID, API_HASH, DOWNLOADS_DIR, ACCOUNTS_DIR, find_english_word
from database import (
    add_account, get_account_by_phone, get_accounts_by_lang, 
    delete_accounts_by_status, get_account_stats, get_all_accounts
)
from exceptions import AccountValidationError, FileProcessingError

logger = logging.getLogger(__name__)

class AccountService:
    def __init__(self):
        self.validation_retries = 3
        self.validation_delay = 2.0
    
    async def add_accounts_from_zip(self, zip_path: Path, target_lang: str, 
                                  validate_accounts: bool = True,
                                  progress_callback=None) -> Dict[str, int]:
        results = {
            'total': 0,
            'validated': 0,
            'added': 0,
            'skipped_exists': 0,
            'failed_validation': 0,
            'failed_db': 0
        }
        
        temp_extract_path = None
        
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            if progress_callback:
                await progress_callback("üì¶ –ò–∑–≤–ª–µ–∫–∞—é –∞—Ä—Ö–∏–≤...")
                
            temp_extract_path = DOWNLOADS_DIR / f"temp_extract_{int(time.time())}"
            accounts_data = await self._extract_zip_archive(zip_path, temp_extract_path)
            results['total'] = len(accounts_data)
            
            if not accounts_data:
                raise FileProcessingError("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            logger.info(f"üì± –ù–∞–π–¥–µ–Ω–æ {results['total']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if progress_callback:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")
                
            existing_phones = set()
            for account_data in accounts_data:
                existing = await get_account_by_phone(account_data['phone'])
                if existing:
                    results['skipped_exists'] += 1
                    existing_phones.add(account_data['phone'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            new_accounts = [
                acc for acc in accounts_data 
                if acc['phone'] not in existing_phones
            ]
            
            logger.info(f"üìù –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(new_accounts)} –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            if not new_accounts:
                return results
            
            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if validate_accounts:
                # –†–µ–∂–∏–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                batch_results = await self._process_with_validation(
                    new_accounts, target_lang, progress_callback
                )
            else:
                # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                batch_results = await self._process_fast_mode(
                    new_accounts, target_lang, progress_callback
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for key in ['validated', 'added', 'failed_validation', 'failed_db']:
                results[key] += batch_results[key]
            
            # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if batch_results.get('added_accounts'):
                if progress_callback:
                    await progress_callback(f"üì∫ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
                
                subscription_stats = await self._create_subscription_tasks_for_new_accounts(
                    batch_results['added_accounts'], target_lang
                )
                
                logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–æ {subscription_stats.get('tasks_created', 0)} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            success_rate = (results['added'] / results['total']) * 100 if results['total'] > 0 else 0
            mode_text = "—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π" if validate_accounts else "–±—ã—Å—Ç—Ä–æ–µ"
            
            logger.info(f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({mode_text}):
   üì± –í—Å–µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ: {results['total']}
   ‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {results['validated']}
   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {results['added']}
   ‚è≠Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {results['skipped_exists']}
   ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {results['failed_validation']}
   üö´ –û—à–∏–±–∫–∏ –ë–î: {results['failed_db']}
   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%
            """)
            
            return results
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            raise AccountValidationError(f"Failed to add accounts: {e}")
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if temp_extract_path and temp_extract_path.exists():
                try:
                    shutil.rmtree(temp_extract_path)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    async def _extract_zip_archive(self, zip_path: Path, extract_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        accounts_data = []
        
        try:
            extract_path.mkdir(parents=True, exist_ok=True)
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_path)
            
            # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ tdata)
            for item in extract_path.iterdir():
                if item.is_dir():
                    tdata_path = item / 'tdata'
                    if tdata_path.exists() and tdata_path.is_dir():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ tdata –µ—Å—Ç—å —Ñ–∞–π–ª—ã
                        if any(tdata_path.glob('*')):
                            accounts_data.append({
                                'phone': item.name,
                                'tdata_path': tdata_path,
                                'account_path': item
                            })
            
            logger.info(f"üìÇ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(accounts_data)} –ø–∞–ø–æ–∫ —Å tdata")
            return accounts_data
            
        except zipfile.BadZipFile:
            raise FileProcessingError("–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º")
        except Exception as e:
            raise FileProcessingError(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
    
    async def _process_with_validation(self, accounts_batch: List[Dict], target_lang: str, 
                                     progress_callback=None) -> Dict[str, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        results = {
            'validated': 0,
            'added': 0,
            'failed_validation': 0,
            'failed_db': 0,
            'added_accounts': []
        }
        
        total_accounts = len(accounts_batch)
        logger.info(f"üîç –†–µ–∂–∏–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π: {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        for idx, account_data in enumerate(accounts_batch):
            phone = account_data['phone']
            
            try:
                if progress_callback and idx % 10 == 0:
                    progress = (idx / total_accounts) * 100
                    await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫–∫–∞—É–Ω—Ç—ã: {idx}/{total_accounts} ({progress:.0f}%)")
                
                # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º tdata –≤ session_data
                session_data = await self._convert_tdata_to_session(account_data)
                
                if not session_data:
                    results['failed_validation'] += 1
                    logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å tdata")
                    continue
                
                # 2. –ü–†–û–í–ï–†–Ø–ï–ú –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                is_authorized = await self._validate_session_authorization(session_data, phone)
                
                if is_authorized:
                    results['validated'] += 1
                    
                    # 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                    success = await add_account(
                        phone=phone,
                        session_data=session_data,
                        lang=find_english_word(target_lang)
                    )
                    
                    if success:
                        results['added'] += 1
                        results['added_accounts'].append({
                            'phone_number': phone,
                            'session_data': session_data,
                            'lang': find_english_word(target_lang)
                        })
                        logger.debug(f"‚úÖ {phone}: –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
                    else:
                        results['failed_db'] += 1
                        logger.warning(f"üö´ {phone}: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î")
                else:
                    results['failed_validation'] += 1
                    logger.warning(f"‚ùå {phone}: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(random.uniform(1.0, 3.0))
                
            except Exception as e:
                results['failed_validation'] += 1
                logger.error(f"üí• {phone}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {e}")
        
        return results
    
    async def _process_fast_mode(self, accounts_batch: List[Dict], target_lang: str, 
                               progress_callback=None) -> Dict[str, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        results = {
            'validated': 0,
            'added': 0,
            'failed_validation': 0,
            'failed_db': 0,
            'added_accounts': []
        }
        
        total_accounts = len(accounts_batch)
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        for idx, account_data in enumerate(accounts_batch):
            phone = account_data['phone']
            
            try:
                if progress_callback and idx % 50 == 0:
                    progress = (idx / total_accounts) * 100
                    await progress_callback(f"‚ö° –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è—é: {idx}/{total_accounts} ({progress:.0f}%)")
                
                # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º tdata –≤ session_data –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                session_data = await self._convert_tdata_to_session_fast(account_data)
                
                if session_data:
                    # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    success = await add_account(
                        phone=phone,
                        session_data=session_data,
                        lang=find_english_word(target_lang)
                    )
                    
                    if success:
                        results['added'] += 1
                        results['added_accounts'].append({
                            'phone_number': phone,
                            'session_data': session_data,
                            'lang': find_english_word(target_lang)
                        })
                        logger.debug(f"‚ö° {phone}: –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                    else:
                        results['failed_db'] += 1
                        logger.warning(f"üö´ {phone}: –æ—à–∏–±–∫–∞ –ë–î")
                else:
                    results['failed_db'] += 1
                    logger.warning(f"‚ùå {phone}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
                
            except Exception as e:
                results['failed_db'] += 1
                logger.error(f"üí• {phone}: –æ—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - {e}")
        
        return results
    
    async def _convert_tdata_to_session(self, account_data: Dict) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç tdata –≤ session_data"""
        phone = account_data['phone']
        tdata_path = account_data['tdata_path']
        temp_session_path = None
        
        try:
            temp_session_path = tdata_path.parent / f"temp_{int(time.time())}.session"
            
            tdesk = TDesktop(tdata_path)
            if not tdesk.accounts:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Telethon
            client = await tdesk.ToTelethon(
                session=str(temp_session_path),
                flag=UseCurrentSession
            )
            await client.disconnect()
            
            # –ü–æ–ª—É—á–∞–µ–º session_data
            temp_client = TelegramClient(
                session=str(temp_session_path),
                api_id=API_ID,
                api_hash=API_HASH
            )
            
            session_data = StringSession.save(temp_client.session)
            logger.debug(f"üîÑ {phone}: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ session_data")
            return session_data
            
        except Exception as e:
            logger.warning(f"‚ùå {phone}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - {e}")
            return None
            
        finally:
            if temp_session_path and temp_session_path.exists():
                try:
                    temp_session_path.unlink()
                except:
                    pass
    
    async def _convert_tdata_to_session_fast(self, account_data: Dict) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tdata –≤ session_data –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        return await self._convert_tdata_to_session(account_data)
    
    async def _validate_session_authorization(self, session_data: str, phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ –ø—É—Ç–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        client = None
        
        for attempt in range(self.validation_retries):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(
                    StringSession(session_data),
                    API_ID, API_HASH,
                    connection_retries=1,
                    timeout=15
                )
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                await client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    try:
                        me = await client.get_me()
                        logger.debug(f"‚úÖ {phone}: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (@{me.username or 'no_username'})")
                        return True
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è {phone}: –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - {e}")
                        return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
                else:
                    logger.warning(f"‚ùå {phone}: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return False
                    
            except Exception as e:
                logger.warning(f"‚ùå {phone}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.validation_retries}) - {e}")
                
                if attempt < self.validation_retries - 1:
                    await asyncio.sleep(self.validation_delay)
                    
            finally:
                if client:
                    try:
                        await client.disconnect()
                    except:
                        pass
        
        return False
    
    async def _create_subscription_tasks_for_new_accounts(self, added_accounts: List[Dict], target_lang: str) -> Dict[str, int]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —è–∑—ã–∫–∞"""
        subscription_stats = {
            'channels_found': 0,
            'tasks_created': 0,
            'accounts_processed': 0
        }
        
        try:
            from database import get_channels_by_lang
            channels = await get_channels_by_lang(target_lang)
            
            if not channels:
                logger.info(f"üì∫ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ {target_lang}")
                return subscription_stats
            
            subscription_stats['channels_found'] = len(channels)
            subscription_stats['accounts_processed'] = len(added_accounts)
            
            logger.info(f"üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {len(added_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            total_tasks_created = 0
            
            for channel_name in channels:
                try:
                    channel_tasks = await self._create_subscription_tasks_for_channel(
                        channel_name, added_accounts, target_lang
                    )
                    
                    total_tasks_created += channel_tasks
                    logger.debug(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name}: {channel_tasks} –∑–∞–¥–∞—á")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è @{channel_name}: {e}")
            
            subscription_stats['tasks_created'] = total_tasks_created
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {total_tasks_created} –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return subscription_stats
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return subscription_stats
    
    async def _create_subscription_tasks_for_channel(self, channel_name: str, accounts: List[Dict], target_lang: str) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            if not accounts:
                return 0
            
            from config import find_english_word, read_setting
            import time
            import random
            
            english_lang = find_english_word(target_lang)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–µ–∫
            base_delay = read_setting('lag.txt', 14.0) * 60
            range_val = read_setting('range.txt', 5.0) * 60
            timeout_count = int(read_setting('timeout_count.txt', 3.0))
            timeout_duration = read_setting('timeout_duration.txt', 13.0) * 60
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            shuffled_accounts = accounts.copy()
            random.shuffle(shuffled_accounts)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            subscription_tasks = []
            current_time = time.time()
            next_execute_time = current_time
            
            for account_idx, account in enumerate(shuffled_accounts):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if account_idx == 0:
                    execute_at = next_execute_time
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞—É–∑–∞
                    if account_idx % timeout_count == 0:
                        pause_delay = timeout_duration
                    else:
                        pause_delay = 0
                    
                    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Ä–∞–∑–±—Ä–æ—Å + –ø–∞—É–∑–∞
                    random_variation = random.uniform(-range_val, range_val)
                    total_delay = base_delay + random_variation + pause_delay
                    
                    execute_at = next_execute_time + total_delay
                
                next_execute_time = execute_at
                
                task_data = {
                    'account_session': account['session_data'],
                    'phone': account['phone_number'],
                    'channel': channel_name,
                    'lang': english_lang,
                    'task_type': 'subscribe',
                    'execute_at': execute_at,
                    'retry_count': 0,
                    'created_at': time.time()
                }
                
                subscription_tasks.append(task_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            await self._save_tasks_to_redis(subscription_tasks)
            
            return len(subscription_tasks)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
            return 0
    
    async def _save_tasks_to_redis(self, tasks: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ Redis"""
        try:
            from redis import Redis
            from config import REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
            import json
            
            redis_client = Redis(
                host=REDIS_HOST,
                port=REDIS_PORT,
                password=REDIS_PASSWORD,
                decode_responses=True
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Redis
            tasks_data = {}
            
            for task in tasks:
                task_json = json.dumps(task)
                execute_at = task['execute_at']
                tasks_data[task_json] = execute_at
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            if tasks_data:
                redis_client.zadd("task_queue", tasks_data)
                redis_client.expire("task_queue", 48 * 3600)  # TTL 48 —á–∞—Å–æ–≤
                
                logger.debug(f"üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ Redis")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ Redis: {e}")
    
    # ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ==========
    
    async def delete_accounts_by_status(self, status: str, limit: int = None) -> int:
        """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        try:
            from database import delete_accounts_by_status as db_delete_accounts_by_status
            deleted_count = await db_delete_accounts_by_status(status, limit)
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return 0
    
    async def export_active_accounts(self, target_lang: Optional[str] = None) -> Optional[Path]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ ZIP –∞—Ä—Ö–∏–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if target_lang:
                accounts = await get_accounts_by_lang(find_english_word(target_lang), 'active')
                archive_name = f"active_accounts_{target_lang}_{int(time.time())}.zip"
            else:
                accounts = await get_all_accounts('active')
                archive_name = f"active_accounts_all_{int(time.time())}.zip"
            
            if not accounts:
                logger.warning("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å session_data
            archive_path = DOWNLOADS_DIR / archive_name
            temp_dir = DOWNLOADS_DIR / f"temp_export_{int(time.time())}"
            
            try:
                temp_dir.mkdir(exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                exported_count = 0
                for account in accounts:
                    phone = account['phone_number']
                    session_data = account['session_data']
                    lang = account.get('lang', 'none')
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_dir = temp_dir / phone
                    account_dir.mkdir(exist_ok=True)
                    
                    # –°–æ–∑–¥–∞–µ–º session —Ñ–∞–π–ª
                    session_file = account_dir / f"{phone}.session"
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è session
                        temp_client = TelegramClient(
                            str(session_file),
                            API_ID, API_HASH,
                            session=StringSession(session_data)
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º session –≤ —Ñ–∞–π–ª
                        await temp_client.connect()
                        await temp_client.disconnect()
                        
                        # –°–æ–∑–¥–∞–µ–º info —Ñ–∞–π–ª
                        info_file = account_dir / "info.txt"
                        info_content = f"""Phone: {phone}
Language: {lang}
Status: {account.get('status', 'active')}
Exported: {time.strftime('%Y-%m-%d %H:%M:%S')}
Session: {session_data[:50]}...
"""
                        info_file.write_text(info_content, encoding='utf-8')
                        
                        exported_count += 1
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {phone}: {e}")
                        continue
                
                if exported_count == 0:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
                import zipfile
                with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for root, dirs, files in os.walk(temp_dir):
                        for file in files:
                            file_path = Path(root) / file
                            arc_path = file_path.relative_to(temp_dir)
                            zipf.write(file_path, arc_path)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                shutil.rmtree(temp_dir)
                
                logger.info(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ {archive_name}")
                return archive_path
                
            except Exception as e:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if temp_dir.exists():
                    shutil.rmtree(temp_dir, ignore_errors=True)
                if archive_path.exists():
                    archive_path.unlink()
                raise e
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
account_service = AccountService()